(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _snabbdomJsx = require('snabbdom-jsx');

var _kefir = require('kefir');

var _kefir2 = _interopRequireDefault(_kefir);

var _ampersandDom = require('ampersand-dom');

var _ampersandDom2 = _interopRequireDefault(_ampersandDom);

var _storeJs = require('../store.js');

var _storeJs2 = _interopRequireDefault(_storeJs);

var _helpersJs = require('../helpers.js');

var ENTER = 13;

function onInsert(vnode) {
  var input = _kefir2['default'].fromEvents(vnode.elm, 'keyup').debounce(250).filter(function (e) {
    return (e.keyCode ? e.keyCode : e.which) === ENTER;
  }).map(function (e) {
    return e.target.value.trim();
  }).filter(function (v) {
    return v.length > 4;
  }).skipDuplicates();

  input.onValue(function (v) {
    _storeJs2['default'].dispatch({ post: { title: v, slug: (0, _helpersJs.slugify)(v) } });
  });
}

function handleTitleKeyup(post, e) {
  var val = e.target.value;
  var isURL = val.indexOf('http') > -1;
  var code = e.keyCode ? e.keyCode : e.which;
  var $slug = document.getElementById('slug');
  var $body = document.getElementById('body');

  if (code === ENTER && val.length > 4) {
    post.title = val;
    post.slug = (0, _helpersJs.slugify)(val);
    _storeJs2['default'].dispatch({ post: post });
    _ampersandDom2['default'].removeClass($slug, 'ghost');
    _ampersandDom2['default'].removeClass($body, 'ghost');
    $body.focus();
  }
}

exports['default'] = Title;

function Title(_ref) {
  var title = _ref.title;
  var autofocus = _ref.autofocus;

  return (0, _snabbdomJsx.html)('input', {
    type: 'text',
    id: 'title',
    name: 'title',
    value: title,
    'hook-insert': onInsert,
    autofocus: autofocus,
    placeholder: 'Start writing hereâ€¦' }, []);
}
module.exports = exports['default'];

},{"../helpers.js":3,"../store.js":5,"ampersand-dom":6,"kefir":8,"snabbdom-jsx":10}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _snabbdomJsx = require('snabbdom-jsx');

var _ampersandDom = require('ampersand-dom');

var _ampersandDom2 = _interopRequireDefault(_ampersandDom);

var _storeJs = require('../store.js');

var _storeJs2 = _interopRequireDefault(_storeJs);

var _titleJs = require('./title.js');

var _titleJs2 = _interopRequireDefault(_titleJs);

exports['default'] = Write;

function Write(_ref) {
  var post = _ref.post;

  var autofocus = function autofocus(_, vnode) {
    if (post.title) vnode.elm.focus();
  };

  return (0, _snabbdomJsx.html)('div', { classNames: 'pure-g' }, ['\n    ', (0, _snabbdomJsx.html)('div', { classNames: 'pure-u-1' }, ['\n      ', (0, _snabbdomJsx.html)('form', { classNames: 'pure-form' }, ['\n        ', (0, _titleJs2['default'])({ title: post.title, autofocus: !post.slug }), ' \n\n        ', (0, _snabbdomJsx.html)('input', {
    type: 'text',
    id: 'slug',
    name: 'slug',
    classNames: 'minor',
    'class-ghost': post.slug === '',
    value: post.slug,
    disabled: true
  }, []), '\n\n        ', (0, _snabbdomJsx.html)('textarea', {
    id: 'body',
    name: 'body',
    'class-ghost': !post.title,
    autofocus: post.title,
    'hook-postpatch': autofocus
  }, []), '\n      ']), '\n    ']), '\n  ']);
}
module.exports = exports['default'];

},{"../store.js":5,"./title.js":1,"ampersand-dom":6,"snabbdom-jsx":10}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slugify = slugify;

function slugify(text) {
  text = text.replace(/[^-a-zA-Z0-9,&\s]+/ig, '');
  text = text.replace(/-/gi, "_");
  text = text.replace(/\s/gi, "-");
  return '/' + text.toLowerCase();
}

},{}],4:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _snabbdomH = require('snabbdom/h');

var _snabbdomH2 = _interopRequireDefault(_snabbdomH);

var _snabbdom = require('snabbdom');

var _snabbdom2 = _interopRequireDefault(_snabbdom);

var _storeJs = require('./store.js');

var _storeJs2 = _interopRequireDefault(_storeJs);

var _componentsWriteJs = require('./components/write.js');

var _componentsWriteJs2 = _interopRequireDefault(_componentsWriteJs);

var patch = _snabbdom2['default'].init([require('snabbdom/modules/class'), require('snabbdom/modules/props'), require('snabbdom/modules/style'), require('snabbdom/modules/eventlisteners')]);

var vnode = undefined;

window.addEventListener('DOMContentLoaded', function () {
  var node = document.getElementById('app');
  vnode = patch(node, (0, _componentsWriteJs2['default'])(_storeJs2['default'].getState()));
});

_storeJs2['default'].subscribe(function () {
  vnode = patch(vnode, (0, _componentsWriteJs2['default'])(_storeJs2['default'].getState()));
});

},{"./components/write.js":2,"./store.js":5,"snabbdom":17,"snabbdom/h":11,"snabbdom/modules/class":13,"snabbdom/modules/eventlisteners":14,"snabbdom/modules/props":15,"snabbdom/modules/style":16}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _atom = require('atom');

var _atom2 = _interopRequireDefault(_atom);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var STORAGE = 'gum';

var initialState = (0, _objectAssign2['default'])({
  post: {
    title: '',
    slug: '',
    body: ''
  }
}, JSON.parse(localStorage.getItem(STORAGE)));

var store = (0, _atom2['default'])(reducer, initialState);

store.subscribe(function () {
  console.log('subscribe', store.getState());
  localStorage.setItem(STORAGE, JSON.stringify(store.getState()));
});

exports['default'] = store;

// in our case, action is just a partial 'state' object to merge
function reducer(state, action) {
  return (0, _objectAssign2['default'])({}, state, action);
}
module.exports = exports['default'];

},{"atom":7,"object-assign":9}],6:[function(require,module,exports){
;if (typeof window !== "undefined") {  window.ampersand = window.ampersand || {};  window.ampersand["ampersand-dom"] = window.ampersand["ampersand-dom"] || [];  window.ampersand["ampersand-dom"].push("1.4.0");}
var dom = module.exports = {
    text: function (el, val) {
        el.textContent = getString(val);
    },
    // optimize if we have classList
    addClass: function (el, cls) {
        cls = getString(cls);
        if (!cls) return;
        if (Array.isArray(cls)) {
            cls.forEach(function(c) {
                dom.addClass(el, c);
            });
        } else if (el.classList) {
            el.classList.add(cls);
        } else {
            if (!hasClass(el, cls)) {
                if (el.classList) {
                    el.classList.add(cls);
                } else {
                    el.className += ' ' + cls;
                }
            }
        }
    },
    removeClass: function (el, cls) {
        if (Array.isArray(cls)) {
            cls.forEach(function(c) {
                dom.removeClass(el, c);
            });
        } else if (el.classList) {
            cls = getString(cls);
            if (cls) el.classList.remove(cls);
        } else {
            // may be faster to not edit unless we know we have it?
            el.className = el.className.replace(new RegExp('(^|\\b)' + cls.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
        }
    },
    hasClass: hasClass,
    switchClass: function (el, prevCls, newCls) {
        if (prevCls) this.removeClass(el, prevCls);
        this.addClass(el, newCls);
    },
    // makes sure attribute (with no content) is added
    // if exists it will be cleared of content
    addAttribute: function (el, attr) {
        // setting to empty string does same
        el.setAttribute(attr, '');
        // Some browsers won't update UI for boolean attributes unless you
        // set it directly. So we do both
        if (hasBooleanProperty(el, attr)) el[attr] = true;
    },
    // completely removes attribute
    removeAttribute: function (el, attr) {
        el.removeAttribute(attr);
        if (hasBooleanProperty(el, attr)) el[attr] = false;
    },
    // sets attribute to string value given, clearing any current value
    setAttribute: function (el, attr, value) {
        el.setAttribute(attr, getString(value));
    },
    getAttribute: function (el, attr) {
        return el.getAttribute(attr);
    },
    hasAttribute: function (el, attr) {
        return el.hasAttribute(attr);
    },
    hide: function (el, mode) {
        if (!mode) mode = 'display';
        if (!isHidden(el)) {
            storeDisplayStyle(el, mode);
            hide(el, mode);
        }
    },
    // show element
    show: function (el, mode) {
        if (!mode) mode = 'display';
        show(el, mode);
    },
    html: function (el, content) {
        el.innerHTML = content;
    }
};

// helpers
function getString(val) {
    if (!val && val !== 0) {
        return '';
    } else {
        return val;
    }
}

function hasClass(el, cls) {
    if (el.classList) {
        return el.classList.contains(cls);
    } else {
        return new RegExp('(^| )' + cls + '( |$)', 'gi').test(el.className);
    }
}

function hasBooleanProperty(el, prop) {
    var val = el[prop];
    return prop in el && (val === true || val === false);
}

function isHidden (el) {
    return dom.getAttribute(el, 'data-anddom-hidden') === 'true';
}

function storeDisplayStyle (el, mode) {
    dom.setAttribute(el, 'data-anddom-' + mode, el.style[mode]);
}

function show (el, mode) {
    el.style[mode] = dom.getAttribute(el, 'data-anddom-' + mode) || '';
    dom.removeAttribute(el, 'data-anddom-hidden');
}

function hide (el, mode) {
    dom.setAttribute(el, 'data-anddom-hidden', 'true');
    el.style[mode] = (mode === 'visibility' ? 'hidden' : 'none');
}

},{}],7:[function(require,module,exports){
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    define([], factory);
  } else if (typeof exports === 'object') {
    module.exports = factory();
  } else {
    root.atom = factory();
  }
}(this, function() {
  'use strict';

  return function(reducer, initialState) {
    var listeners = [];
    var state = initialState;

    return {
      dispatch: dispatch,
      subscribe: subscribe,
      getState: getState
    };

    function dispatch(action) {
      var newState = reducer(state, action);

      if (newState === undefined) {
        throw new E('Reducer must return a value.');
      } else if (typeof newState.then === 'function') {
        throw new E('Reducer cannot return a Promise.');
      } else if (typeof newState === 'function') {
        newState(dispatch);
      } else {
        cb(newState);
      }
    }

    function subscribe(listener) {
      if (typeof listener !== 'function') {
        throw new E('listener must be a function');
      }
      listeners.push(listener);
    }

    function getState() {
      return state;
    }

    function cb(newState) {
      state = newState;
      for (var x=0; x < listeners.length; x++) {
        listeners[x]();
      }
    }

    function E(message) {
      this.message = message;
      this.name = "AtomException";
      this.toString = function() {
        return this.name + ': ' + this.message;
      };
    }
  };
}));
},{}],8:[function(require,module,exports){
/*! Kefir.js v3.1.0
 *  https://github.com/rpominov/kefir
 */

(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Kefir"] = factory();
	else
		root["Kefir"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Kefir = module.exports = {};
	Kefir.Kefir = Kefir;

	var Observable = Kefir.Observable = __webpack_require__(1);
	Kefir.Stream = __webpack_require__(6);
	Kefir.Property = __webpack_require__(7);

	// Create a stream
	// -----------------------------------------------------------------------------

	// () -> Stream
	Kefir.never = __webpack_require__(8);

	// (number, any) -> Stream
	Kefir.later = __webpack_require__(9);

	// (number, any) -> Stream
	Kefir.interval = __webpack_require__(11);

	// (number, Array<any>) -> Stream
	Kefir.sequentially = __webpack_require__(12);

	// (number, Function) -> Stream
	Kefir.fromPoll = __webpack_require__(13);

	// (number, Function) -> Stream
	Kefir.withInterval = __webpack_require__(14);

	// (Function) -> Stream
	Kefir.fromCallback = __webpack_require__(16);

	// (Function) -> Stream
	Kefir.fromNodeCallback = __webpack_require__(18);

	// Target = {addEventListener, removeEventListener}|{addListener, removeListener}|{on, off}
	// (Target, string, Function|undefined) -> Stream
	Kefir.fromEvents = __webpack_require__(19);

	// (Function) -> Stream
	Kefir.stream = __webpack_require__(17);

	// Create a property
	// -----------------------------------------------------------------------------

	// (any) -> Property
	Kefir.constant = __webpack_require__(22);

	// (any) -> Property
	Kefir.constantError = __webpack_require__(23);

	// Convert observables
	// -----------------------------------------------------------------------------

	// (Stream|Property, Function|undefined) -> Property
	var toProperty = __webpack_require__(24);
	Observable.prototype.toProperty = function (fn) {
	  return toProperty(this, fn);
	};

	// (Stream|Property) -> Stream
	var changes = __webpack_require__(26);
	Observable.prototype.changes = function () {
	  return changes(this);
	};

	// Interoperation with other implimentations
	// -----------------------------------------------------------------------------

	// (Promise) -> Property
	Kefir.fromPromise = __webpack_require__(27);

	// (Stream|Property, Function|undefined) -> Promise
	var toPromise = __webpack_require__(28);
	Observable.prototype.toPromise = function (Promise) {
	  return toPromise(this, Promise);
	};

	// (ESObservable) -> Stream
	Kefir.fromESObservable = __webpack_require__(29);

	// (Stream|Property) -> ES7 Observable
	var toESObservable = __webpack_require__(31);
	Observable.prototype.toESObservable = toESObservable;
	Observable.prototype[__webpack_require__(30)('observable')] = toESObservable;

	// Modify an observable
	// -----------------------------------------------------------------------------

	// (Stream, Function|undefined) -> Stream
	// (Property, Function|undefined) -> Property
	var map = __webpack_require__(32);
	Observable.prototype.map = function (fn) {
	  return map(this, fn);
	};

	// (Stream, Function|undefined) -> Stream
	// (Property, Function|undefined) -> Property
	var filter = __webpack_require__(33);
	Observable.prototype.filter = function (fn) {
	  return filter(this, fn);
	};

	// (Stream, number) -> Stream
	// (Property, number) -> Property
	var take = __webpack_require__(34);
	Observable.prototype.take = function (n) {
	  return take(this, n);
	};

	// (Stream, number) -> Stream
	// (Property, number) -> Property
	var takeErrors = __webpack_require__(35);
	Observable.prototype.takeErrors = function (n) {
	  return takeErrors(this, n);
	};

	// (Stream, Function|undefined) -> Stream
	// (Property, Function|undefined) -> Property
	var takeWhile = __webpack_require__(36);
	Observable.prototype.takeWhile = function (fn) {
	  return takeWhile(this, fn);
	};

	// (Stream) -> Stream
	// (Property) -> Property
	var last = __webpack_require__(37);
	Observable.prototype.last = function () {
	  return last(this);
	};

	// (Stream, number) -> Stream
	// (Property, number) -> Property
	var skip = __webpack_require__(38);
	Observable.prototype.skip = function (n) {
	  return skip(this, n);
	};

	// (Stream, Function|undefined) -> Stream
	// (Property, Function|undefined) -> Property
	var skipWhile = __webpack_require__(39);
	Observable.prototype.skipWhile = function (fn) {
	  return skipWhile(this, fn);
	};

	// (Stream, Function|undefined) -> Stream
	// (Property, Function|undefined) -> Property
	var skipDuplicates = __webpack_require__(40);
	Observable.prototype.skipDuplicates = function (fn) {
	  return skipDuplicates(this, fn);
	};

	// (Stream, Function|falsey, any|undefined) -> Stream
	// (Property, Function|falsey, any|undefined) -> Property
	var diff = __webpack_require__(41);
	Observable.prototype.diff = function (fn, seed) {
	  return diff(this, fn, seed);
	};

	// (Stream|Property, Function, any|undefined) -> Property
	var scan = __webpack_require__(42);
	Observable.prototype.scan = function (fn, seed) {
	  return scan(this, fn, seed);
	};

	// (Stream, Function|undefined) -> Stream
	// (Property, Function|undefined) -> Property
	var flatten = __webpack_require__(43);
	Observable.prototype.flatten = function (fn) {
	  return flatten(this, fn);
	};

	// (Stream, number) -> Stream
	// (Property, number) -> Property
	var delay = __webpack_require__(44);
	Observable.prototype.delay = function (wait) {
	  return delay(this, wait);
	};

	// Options = {leading: boolean|undefined, trailing: boolean|undefined}
	// (Stream, number, Options|undefined) -> Stream
	// (Property, number, Options|undefined) -> Property
	var throttle = __webpack_require__(45);
	Observable.prototype.throttle = function (wait, options) {
	  return throttle(this, wait, options);
	};

	// Options = {immediate: boolean|undefined}
	// (Stream, number, Options|undefined) -> Stream
	// (Property, number, Options|undefined) -> Property
	var debounce = __webpack_require__(47);
	Observable.prototype.debounce = function (wait, options) {
	  return debounce(this, wait, options);
	};

	// (Stream, Function|undefined) -> Stream
	// (Property, Function|undefined) -> Property
	var mapErrors = __webpack_require__(48);
	Observable.prototype.mapErrors = function (fn) {
	  return mapErrors(this, fn);
	};

	// (Stream, Function|undefined) -> Stream
	// (Property, Function|undefined) -> Property
	var filterErrors = __webpack_require__(49);
	Observable.prototype.filterErrors = function (fn) {
	  return filterErrors(this, fn);
	};

	// (Stream) -> Stream
	// (Property) -> Property
	var ignoreValues = __webpack_require__(50);
	Observable.prototype.ignoreValues = function () {
	  return ignoreValues(this);
	};

	// (Stream) -> Stream
	// (Property) -> Property
	var ignoreErrors = __webpack_require__(51);
	Observable.prototype.ignoreErrors = function () {
	  return ignoreErrors(this);
	};

	// (Stream) -> Stream
	// (Property) -> Property
	var ignoreEnd = __webpack_require__(52);
	Observable.prototype.ignoreEnd = function () {
	  return ignoreEnd(this);
	};

	// (Stream, Function) -> Stream
	// (Property, Function) -> Property
	var beforeEnd = __webpack_require__(53);
	Observable.prototype.beforeEnd = function (fn) {
	  return beforeEnd(this, fn);
	};

	// (Stream, number, number|undefined) -> Stream
	// (Property, number, number|undefined) -> Property
	var slidingWindow = __webpack_require__(54);
	Observable.prototype.slidingWindow = function (max, min) {
	  return slidingWindow(this, max, min);
	};

	// Options = {flushOnEnd: boolean|undefined}
	// (Stream, Function|falsey, Options|undefined) -> Stream
	// (Property, Function|falsey, Options|undefined) -> Property
	var bufferWhile = __webpack_require__(55);
	Observable.prototype.bufferWhile = function (fn, options) {
	  return bufferWhile(this, fn, options);
	};

	// (Stream, Function) -> Stream
	// (Property, Function) -> Property
	var transduce = __webpack_require__(56);
	Observable.prototype.transduce = function (transducer) {
	  return transduce(this, transducer);
	};

	// (Stream, Function) -> Stream
	// (Property, Function) -> Property
	var withHandler = __webpack_require__(57);
	Observable.prototype.withHandler = function (fn) {
	  return withHandler(this, fn);
	};

	// Combine observables
	// -----------------------------------------------------------------------------

	// (Array<Stream|Property>, Function|undefiend) -> Stream
	// (Array<Stream|Property>, Array<Stream|Property>, Function|undefiend) -> Stream
	var combine = Kefir.combine = __webpack_require__(58);
	Observable.prototype.combine = function (other, combinator) {
	  return combine([this, other], combinator);
	};

	// (Array<Stream|Property>, Function|undefiend) -> Stream
	var zip = Kefir.zip = __webpack_require__(59);
	Observable.prototype.zip = function (other, combinator) {
	  return zip([this, other], combinator);
	};

	// (Array<Stream|Property>) -> Stream
	var merge = Kefir.merge = __webpack_require__(60);
	Observable.prototype.merge = function (other) {
	  return merge([this, other]);
	};

	// (Array<Stream|Property>) -> Stream
	var concat = Kefir.concat = __webpack_require__(62);
	Observable.prototype.concat = function (other) {
	  return concat([this, other]);
	};

	// () -> Pool
	var Pool = Kefir.Pool = __webpack_require__(64);
	Kefir.pool = function () {
	  return new Pool();
	};

	// (Function) -> Stream
	Kefir.repeat = __webpack_require__(63);

	// Options = {concurLim: number|undefined, queueLim: number|undefined, drop: 'old'|'new'|undefiend}
	// (Stream|Property, Function|falsey, Options|undefined) -> Stream
	var FlatMap = __webpack_require__(65);
	Observable.prototype.flatMap = function (fn) {
	  return new FlatMap(this, fn).setName(this, 'flatMap');
	};
	Observable.prototype.flatMapLatest = function (fn) {
	  return new FlatMap(this, fn, { concurLim: 1, drop: 'old' }).setName(this, 'flatMapLatest');
	};
	Observable.prototype.flatMapFirst = function (fn) {
	  return new FlatMap(this, fn, { concurLim: 1 }).setName(this, 'flatMapFirst');
	};
	Observable.prototype.flatMapConcat = function (fn) {
	  return new FlatMap(this, fn, { queueLim: -1, concurLim: 1 }).setName(this, 'flatMapConcat');
	};
	Observable.prototype.flatMapConcurLimit = function (fn, limit) {
	  return new FlatMap(this, fn, { queueLim: -1, concurLim: limit }).setName(this, 'flatMapConcurLimit');
	};

	// (Stream|Property, Function|falsey) -> Stream
	var FlatMapErrors = __webpack_require__(66);
	Observable.prototype.flatMapErrors = function (fn) {
	  return new FlatMapErrors(this, fn).setName(this, 'flatMapErrors');
	};

	// Combine two observables
	// -----------------------------------------------------------------------------

	// (Stream, Stream|Property) -> Stream
	// (Property, Stream|Property) -> Property
	var filterBy = __webpack_require__(67);
	Observable.prototype.filterBy = function (other) {
	  return filterBy(this, other);
	};

	// (Stream, Stream|Property, Function|undefiend) -> Stream
	// (Property, Stream|Property, Function|undefiend) -> Property
	var sampledBy2items = __webpack_require__(69);
	Observable.prototype.sampledBy = function (other, combinator) {
	  return sampledBy2items(this, other, combinator);
	};

	// (Stream, Stream|Property) -> Stream
	// (Property, Stream|Property) -> Property
	var skipUntilBy = __webpack_require__(70);
	Observable.prototype.skipUntilBy = function (other) {
	  return skipUntilBy(this, other);
	};

	// (Stream, Stream|Property) -> Stream
	// (Property, Stream|Property) -> Property
	var takeUntilBy = __webpack_require__(71);
	Observable.prototype.takeUntilBy = function (other) {
	  return takeUntilBy(this, other);
	};

	// Options = {flushOnEnd: boolean|undefined}
	// (Stream, Stream|Property, Options|undefined) -> Stream
	// (Property, Stream|Property, Options|undefined) -> Property
	var bufferBy = __webpack_require__(72);
	Observable.prototype.bufferBy = function (other, options) {
	  return bufferBy(this, other, options);
	};

	// Options = {flushOnEnd: boolean|undefined}
	// (Stream, Stream|Property, Options|undefined) -> Stream
	// (Property, Stream|Property, Options|undefined) -> Property
	var bufferWhileBy = __webpack_require__(73);
	Observable.prototype.bufferWhileBy = function (other, options) {
	  return bufferWhileBy(this, other, options);
	};

	// Deprecated
	// -----------------------------------------------------------------------------

	function warn(msg) {
	  if (Kefir.DEPRECATION_WARNINGS !== false && console && typeof console.warn === 'function') {
	    var msg2 = '\nHere is an Error object for you containing the call stack:';
	    console.warn(msg, msg2, new Error());
	  }
	}

	// (Stream|Property, Stream|Property) -> Property
	var awaiting = __webpack_require__(74);
	Observable.prototype.awaiting = function (other) {
	  warn('You are using deprecated .awaiting() method, see https://github.com/rpominov/kefir/issues/145');
	  return awaiting(this, other);
	};

	// (Stream, Function|undefined) -> Stream
	// (Property, Function|undefined) -> Property
	var valuesToErrors = __webpack_require__(75);
	Observable.prototype.valuesToErrors = function (fn) {
	  warn('You are using deprecated .valuesToErrors() method, see https://github.com/rpominov/kefir/issues/149');
	  return valuesToErrors(this, fn);
	};

	// (Stream, Function|undefined) -> Stream
	// (Property, Function|undefined) -> Property
	var errorsToValues = __webpack_require__(76);
	Observable.prototype.errorsToValues = function (fn) {
	  warn('You are using deprecated .errorsToValues() method, see https://github.com/rpominov/kefir/issues/149');
	  return errorsToValues(this, fn);
	};

	// (Stream) -> Stream
	// (Property) -> Property
	var endOnError = __webpack_require__(77);
	Observable.prototype.endOnError = function () {
	  warn('You are using deprecated .endOnError() method, see https://github.com/rpominov/kefir/issues/150');
	  return endOnError(this);
	};

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(2);

	var extend = _require.extend;

	var _require2 = __webpack_require__(3);

	var VALUE = _require2.VALUE;
	var ERROR = _require2.ERROR;
	var ANY = _require2.ANY;
	var END = _require2.END;

	var _require3 = __webpack_require__(4);

	var Dispatcher = _require3.Dispatcher;
	var callSubscriber = _require3.callSubscriber;

	var _require4 = __webpack_require__(5);

	var findByPred = _require4.findByPred;

	function Observable() {
	  this._dispatcher = new Dispatcher();
	  this._active = false;
	  this._alive = true;
	  this._activating = false;
	  this._logHandlers = null;
	}

	extend(Observable.prototype, {

	  _name: 'observable',

	  _onActivation: function _onActivation() {},
	  _onDeactivation: function _onDeactivation() {},

	  _setActive: function _setActive(active) {
	    if (this._active !== active) {
	      this._active = active;
	      if (active) {
	        this._activating = true;
	        this._onActivation();
	        this._activating = false;
	      } else {
	        this._onDeactivation();
	      }
	    }
	  },

	  _clear: function _clear() {
	    this._setActive(false);
	    this._dispatcher.cleanup();
	    this._dispatcher = null;
	    this._logHandlers = null;
	  },

	  _emit: function _emit(type, x) {
	    switch (type) {
	      case VALUE:
	        return this._emitValue(x);
	      case ERROR:
	        return this._emitError(x);
	      case END:
	        return this._emitEnd();
	    }
	  },

	  _emitValue: function _emitValue(value) {
	    if (this._alive) {
	      this._dispatcher.dispatch({ type: VALUE, value: value });
	    }
	  },

	  _emitError: function _emitError(value) {
	    if (this._alive) {
	      this._dispatcher.dispatch({ type: ERROR, value: value });
	    }
	  },

	  _emitEnd: function _emitEnd() {
	    if (this._alive) {
	      this._alive = false;
	      this._dispatcher.dispatch({ type: END });
	      this._clear();
	    }
	  },

	  _on: function _on(type, fn) {
	    if (this._alive) {
	      this._dispatcher.add(type, fn);
	      this._setActive(true);
	    } else {
	      callSubscriber(type, fn, { type: END });
	    }
	    return this;
	  },

	  _off: function _off(type, fn) {
	    if (this._alive) {
	      var count = this._dispatcher.remove(type, fn);
	      if (count === 0) {
	        this._setActive(false);
	      }
	    }
	    return this;
	  },

	  onValue: function onValue(fn) {
	    return this._on(VALUE, fn);
	  },
	  onError: function onError(fn) {
	    return this._on(ERROR, fn);
	  },
	  onEnd: function onEnd(fn) {
	    return this._on(END, fn);
	  },
	  onAny: function onAny(fn) {
	    return this._on(ANY, fn);
	  },

	  offValue: function offValue(fn) {
	    return this._off(VALUE, fn);
	  },
	  offError: function offError(fn) {
	    return this._off(ERROR, fn);
	  },
	  offEnd: function offEnd(fn) {
	    return this._off(END, fn);
	  },
	  offAny: function offAny(fn) {
	    return this._off(ANY, fn);
	  },

	  // A and B must be subclasses of Stream and Property (order doesn't matter)
	  _ofSameType: function _ofSameType(A, B) {
	    return A.prototype.getType() === this.getType() ? A : B;
	  },

	  setName: function setName(sourceObs, /* optional */selfName) {
	    this._name = selfName ? sourceObs._name + '.' + selfName : sourceObs;
	    return this;
	  },

	  log: function log() {
	    var name = arguments.length <= 0 || arguments[0] === undefined ? this.toString() : arguments[0];

	    var isCurrent = undefined;
	    var handler = function handler(event) {
	      var type = '<' + event.type + (isCurrent ? ':current' : '') + '>';
	      if (event.type === END) {
	        console.log(name, type);
	      } else {
	        console.log(name, type, event.value);
	      }
	    };

	    if (this._alive) {
	      if (!this._logHandlers) {
	        this._logHandlers = [];
	      }
	      this._logHandlers.push({ name: name, handler: handler });
	    }

	    isCurrent = true;
	    this.onAny(handler);
	    isCurrent = false;

	    return this;
	  },

	  offLog: function offLog() {
	    var name = arguments.length <= 0 || arguments[0] === undefined ? this.toString() : arguments[0];

	    if (this._logHandlers) {
	      var handlerIndex = findByPred(this._logHandlers, function (obj) {
	        return obj.name === name;
	      });
	      if (handlerIndex !== -1) {
	        this.offAny(this._logHandlers[handlerIndex].handler);
	        this._logHandlers.splice(handlerIndex, 1);
	      }
	    }

	    return this;
	  }
	});

	// extend() can't handle `toString` in IE8
	Observable.prototype.toString = function () {
	  return '[' + this._name + ']';
	};

	module.exports = Observable;

/***/ },
/* 2 */
/***/ function(module, exports) {

	"use strict";

	function createObj(proto) {
	  var F = function F() {};
	  F.prototype = proto;
	  return new F();
	}

	function extend(target /*, mixin1, mixin2...*/) {
	  var length = arguments.length,
	      i = undefined,
	      prop = undefined;
	  for (i = 1; i < length; i++) {
	    for (prop in arguments[i]) {
	      target[prop] = arguments[i][prop];
	    }
	  }
	  return target;
	}

	function inherit(Child, Parent /*, mixin1, mixin2...*/) {
	  var length = arguments.length,
	      i = undefined;
	  Child.prototype = createObj(Parent.prototype);
	  Child.prototype.constructor = Child;
	  for (i = 2; i < length; i++) {
	    extend(Child.prototype, arguments[i]);
	  }
	  return Child;
	}

	module.exports = { extend: extend, inherit: inherit };

/***/ },
/* 3 */
/***/ function(module, exports) {

	'use strict';

	exports.NOTHING = ['<nothing>'];
	exports.END = 'end';
	exports.VALUE = 'value';
	exports.ERROR = 'error';
	exports.ANY = 'any';

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(2);

	var extend = _require.extend;

	var _require2 = __webpack_require__(3);

	var VALUE = _require2.VALUE;
	var ERROR = _require2.ERROR;
	var ANY = _require2.ANY;

	var _require3 = __webpack_require__(5);

	var concat = _require3.concat;
	var findByPred = _require3.findByPred;
	var _remove = _require3.remove;
	var contains = _require3.contains;

	function callSubscriber(type, fn, event) {
	  if (type === ANY) {
	    fn(event);
	  } else if (type === event.type) {
	    if (type === VALUE || type === ERROR) {
	      fn(event.value);
	    } else {
	      fn();
	    }
	  }
	}

	function Dispatcher() {
	  this._items = [];
	  this._inLoop = 0;
	  this._removedItems = null;
	}

	extend(Dispatcher.prototype, {

	  add: function add(type, fn) {
	    this._items = concat(this._items, [{ type: type, fn: fn }]);
	    return this._items.length;
	  },

	  remove: function remove(type, fn) {
	    var index = findByPred(this._items, function (x) {
	      return x.type === type && x.fn === fn;
	    });

	    // if we're currently in a notification loop,
	    // remember this subscriber was removed
	    if (this._inLoop !== 0 && index !== -1) {
	      if (this._removedItems === null) {
	        this._removedItems = [];
	      }
	      this._removedItems.push(this._items[index]);
	    }

	    this._items = _remove(this._items, index);
	    return this._items.length;
	  },

	  dispatch: function dispatch(event) {
	    this._inLoop++;
	    for (var i = 0, items = this._items; i < items.length; i++) {

	      // cleanup was called
	      if (this._items === null) {
	        break;
	      }

	      // this subscriber was removed
	      if (this._removedItems !== null && contains(this._removedItems, items[i])) {
	        continue;
	      }

	      callSubscriber(items[i].type, items[i].fn, event);
	    }
	    this._inLoop--;
	    if (this._inLoop === 0) {
	      this._removedItems = null;
	    }
	  },

	  cleanup: function cleanup() {
	    this._items = null;
	  }

	});

	module.exports = { callSubscriber: callSubscriber, Dispatcher: Dispatcher };

/***/ },
/* 5 */
/***/ function(module, exports) {

	"use strict";

	function concat(a, b) {
	  var result = undefined,
	      length = undefined,
	      i = undefined,
	      j = undefined;
	  if (a.length === 0) {
	    return b;
	  }
	  if (b.length === 0) {
	    return a;
	  }
	  j = 0;
	  result = new Array(a.length + b.length);
	  length = a.length;
	  for (i = 0; i < length; i++, j++) {
	    result[j] = a[i];
	  }
	  length = b.length;
	  for (i = 0; i < length; i++, j++) {
	    result[j] = b[i];
	  }
	  return result;
	}

	function circleShift(arr, distance) {
	  var length = arr.length,
	      result = new Array(length),
	      i = undefined;
	  for (i = 0; i < length; i++) {
	    result[(i + distance) % length] = arr[i];
	  }
	  return result;
	}

	function find(arr, value) {
	  var length = arr.length,
	      i = undefined;
	  for (i = 0; i < length; i++) {
	    if (arr[i] === value) {
	      return i;
	    }
	  }
	  return -1;
	}

	function findByPred(arr, pred) {
	  var length = arr.length,
	      i = undefined;
	  for (i = 0; i < length; i++) {
	    if (pred(arr[i])) {
	      return i;
	    }
	  }
	  return -1;
	}

	function cloneArray(input) {
	  var length = input.length,
	      result = new Array(length),
	      i = undefined;
	  for (i = 0; i < length; i++) {
	    result[i] = input[i];
	  }
	  return result;
	}

	function remove(input, index) {
	  var length = input.length,
	      result = undefined,
	      i = undefined,
	      j = undefined;
	  if (index >= 0 && index < length) {
	    if (length === 1) {
	      return [];
	    } else {
	      result = new Array(length - 1);
	      for (i = 0, j = 0; i < length; i++) {
	        if (i !== index) {
	          result[j] = input[i];
	          j++;
	        }
	      }
	      return result;
	    }
	  } else {
	    return input;
	  }
	}

	function removeByPred(input, pred) {
	  return remove(input, findByPred(input, pred));
	}

	function map(input, fn) {
	  var length = input.length,
	      result = new Array(length),
	      i = undefined;
	  for (i = 0; i < length; i++) {
	    result[i] = fn(input[i]);
	  }
	  return result;
	}

	function forEach(arr, fn) {
	  var length = arr.length,
	      i = undefined;
	  for (i = 0; i < length; i++) {
	    fn(arr[i]);
	  }
	}

	function fillArray(arr, value) {
	  var length = arr.length,
	      i = undefined;
	  for (i = 0; i < length; i++) {
	    arr[i] = value;
	  }
	}

	function contains(arr, value) {
	  return find(arr, value) !== -1;
	}

	function slide(cur, next, max) {
	  var length = Math.min(max, cur.length + 1),
	      offset = cur.length - length + 1,
	      result = new Array(length),
	      i = undefined;
	  for (i = offset; i < length; i++) {
	    result[i - offset] = cur[i];
	  }
	  result[length - 1] = next;
	  return result;
	}

	module.exports = {
	  concat: concat,
	  circleShift: circleShift,
	  find: find,
	  findByPred: findByPred,
	  cloneArray: cloneArray,
	  remove: remove,
	  removeByPred: removeByPred,
	  map: map,
	  forEach: forEach,
	  fillArray: fillArray,
	  contains: contains,
	  slide: slide
	};

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(2);

	var inherit = _require.inherit;

	var Observable = __webpack_require__(1);

	function Stream() {
	  Observable.call(this);
	}

	inherit(Stream, Observable, {

	  _name: 'stream',

	  getType: function getType() {
	    return 'stream';
	  }

	});

	module.exports = Stream;

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(2);

	var inherit = _require.inherit;

	var _require2 = __webpack_require__(3);

	var VALUE = _require2.VALUE;
	var ERROR = _require2.ERROR;
	var END = _require2.END;

	var _require3 = __webpack_require__(4);

	var callSubscriber = _require3.callSubscriber;

	var Observable = __webpack_require__(1);

	function Property() {
	  Observable.call(this);
	  this._currentEvent = null;
	}

	inherit(Property, Observable, {

	  _name: 'property',

	  _emitValue: function _emitValue(value) {
	    if (this._alive) {
	      this._currentEvent = { type: VALUE, value: value };
	      if (!this._activating) {
	        this._dispatcher.dispatch({ type: VALUE, value: value });
	      }
	    }
	  },

	  _emitError: function _emitError(value) {
	    if (this._alive) {
	      this._currentEvent = { type: ERROR, value: value };
	      if (!this._activating) {
	        this._dispatcher.dispatch({ type: ERROR, value: value });
	      }
	    }
	  },

	  _emitEnd: function _emitEnd() {
	    if (this._alive) {
	      this._alive = false;
	      if (!this._activating) {
	        this._dispatcher.dispatch({ type: END });
	      }
	      this._clear();
	    }
	  },

	  _on: function _on(type, fn) {
	    if (this._alive) {
	      this._dispatcher.add(type, fn);
	      this._setActive(true);
	    }
	    if (this._currentEvent !== null) {
	      callSubscriber(type, fn, this._currentEvent);
	    }
	    if (!this._alive) {
	      callSubscriber(type, fn, { type: END });
	    }
	    return this;
	  },

	  getType: function getType() {
	    return 'property';
	  }

	});

	module.exports = Property;

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Stream = __webpack_require__(6);

	var neverS = new Stream();
	neverS._emitEnd();
	neverS._name = 'never';

	module.exports = function never() {
	  return neverS;
	};

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var timeBased = __webpack_require__(10);

	var S = timeBased({

	  _name: 'later',

	  _init: function _init(_ref) {
	    var x = _ref.x;

	    this._x = x;
	  },

	  _free: function _free() {
	    this._x = null;
	  },

	  _onTick: function _onTick() {
	    this._emitValue(this._x);
	    this._emitEnd();
	  }

	});

	module.exports = function later(wait, x) {
	  return new S(wait, { x: x });
	};

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(2);

	var inherit = _require.inherit;

	var Stream = __webpack_require__(6);

	module.exports = function timeBased(mixin) {

	  function AnonymousStream(wait, options) {
	    var _this = this;

	    Stream.call(this);
	    this._wait = wait;
	    this._intervalId = null;
	    this._$onTick = function () {
	      return _this._onTick();
	    };
	    this._init(options);
	  }

	  inherit(AnonymousStream, Stream, {

	    _init: function _init() {},
	    _free: function _free() {},

	    _onTick: function _onTick() {},

	    _onActivation: function _onActivation() {
	      this._intervalId = setInterval(this._$onTick, this._wait);
	    },

	    _onDeactivation: function _onDeactivation() {
	      if (this._intervalId !== null) {
	        clearInterval(this._intervalId);
	        this._intervalId = null;
	      }
	    },

	    _clear: function _clear() {
	      Stream.prototype._clear.call(this);
	      this._$onTick = null;
	      this._free();
	    }

	  }, mixin);

	  return AnonymousStream;
	};

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var timeBased = __webpack_require__(10);

	var S = timeBased({

	  _name: 'interval',

	  _init: function _init(_ref) {
	    var x = _ref.x;

	    this._x = x;
	  },

	  _free: function _free() {
	    this._x = null;
	  },

	  _onTick: function _onTick() {
	    this._emitValue(this._x);
	  }

	});

	module.exports = function interval(wait, x) {
	  return new S(wait, { x: x });
	};

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var timeBased = __webpack_require__(10);

	var _require = __webpack_require__(5);

	var cloneArray = _require.cloneArray;

	var never = __webpack_require__(8);

	var S = timeBased({

	  _name: 'sequentially',

	  _init: function _init(_ref) {
	    var xs = _ref.xs;

	    this._xs = cloneArray(xs);
	  },

	  _free: function _free() {
	    this._xs = null;
	  },

	  _onTick: function _onTick() {
	    if (this._xs.length === 1) {
	      this._emitValue(this._xs[0]);
	      this._emitEnd();
	    } else {
	      this._emitValue(this._xs.shift());
	    }
	  }

	});

	module.exports = function sequentially(wait, xs) {
	  return xs.length === 0 ? never() : new S(wait, { xs: xs });
	};

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var timeBased = __webpack_require__(10);

	var S = timeBased({

	  _name: 'fromPoll',

	  _init: function _init(_ref) {
	    var fn = _ref.fn;

	    this._fn = fn;
	  },

	  _free: function _free() {
	    this._fn = null;
	  },

	  _onTick: function _onTick() {
	    var fn = this._fn;
	    this._emitValue(fn());
	  }

	});

	module.exports = function fromPoll(wait, fn) {
	  return new S(wait, { fn: fn });
	};

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var timeBased = __webpack_require__(10);
	var emitter = __webpack_require__(15);

	var S = timeBased({

	  _name: 'withInterval',

	  _init: function _init(_ref) {
	    var fn = _ref.fn;

	    this._fn = fn;
	    this._emitter = emitter(this);
	  },

	  _free: function _free() {
	    this._fn = null;
	    this._emitter = null;
	  },

	  _onTick: function _onTick() {
	    var fn = this._fn;
	    fn(this._emitter);
	  }

	});

	module.exports = function withInterval(wait, fn) {
	  return new S(wait, { fn: fn });
	};

/***/ },
/* 15 */
/***/ function(module, exports) {

	"use strict";

	module.exports = function emitter(obs) {

	  function value(x) {
	    obs._emitValue(x);
	    return obs._active;
	  }

	  function error(x) {
	    obs._emitError(x);
	    return obs._active;
	  }

	  function end() {
	    obs._emitEnd();
	    return obs._active;
	  }

	  function event(e) {
	    obs._emit(e.type, e.value);
	    return obs._active;
	  }

	  return { value: value, error: error, end: end, event: event, emit: value, emitEvent: event };
	};

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var stream = __webpack_require__(17);

	module.exports = function fromCallback(callbackConsumer) {

	  var called = false;

	  return stream(function (emitter) {

	    if (!called) {
	      callbackConsumer(function (x) {
	        emitter.emit(x);
	        emitter.end();
	      });
	      called = true;
	    }
	  }).setName('fromCallback');
	};

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(2);

	var inherit = _require.inherit;

	var Stream = __webpack_require__(6);
	var emitter = __webpack_require__(15);

	function S(fn) {
	  Stream.call(this);
	  this._fn = fn;
	  this._unsubscribe = null;
	}

	inherit(S, Stream, {

	  _name: 'stream',

	  _onActivation: function _onActivation() {
	    var fn = this._fn;
	    var unsubscribe = fn(emitter(this));
	    this._unsubscribe = typeof unsubscribe === 'function' ? unsubscribe : null;

	    // fix https://github.com/rpominov/kefir/issues/35
	    if (!this._active) {
	      this._callUnsubscribe();
	    }
	  },

	  _callUnsubscribe: function _callUnsubscribe() {
	    if (this._unsubscribe !== null) {
	      this._unsubscribe();
	      this._unsubscribe = null;
	    }
	  },

	  _onDeactivation: function _onDeactivation() {
	    this._callUnsubscribe();
	  },

	  _clear: function _clear() {
	    Stream.prototype._clear.call(this);
	    this._fn = null;
	  }

	});

	module.exports = function stream(fn) {
	  return new S(fn);
	};

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var stream = __webpack_require__(17);

	module.exports = function fromNodeCallback(callbackConsumer) {

	  var called = false;

	  return stream(function (emitter) {

	    if (!called) {
	      callbackConsumer(function (error, x) {
	        if (error) {
	          emitter.error(error);
	        } else {
	          emitter.emit(x);
	        }
	        emitter.end();
	      });
	      called = true;
	    }
	  }).setName('fromNodeCallback');
	};

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var fromSubUnsub = __webpack_require__(20);

	var pairs = [['addEventListener', 'removeEventListener'], ['addListener', 'removeListener'], ['on', 'off']];

	module.exports = function fromEvents(target, eventName, transformer) {
	  var sub = undefined,
	      unsub = undefined;

	  for (var i = 0; i < pairs.length; i++) {
	    if (typeof target[pairs[i][0]] === 'function' && typeof target[pairs[i][1]] === 'function') {
	      sub = pairs[i][0];
	      unsub = pairs[i][1];
	      break;
	    }
	  }

	  if (sub === undefined) {
	    throw new Error('target don\'t support any of ' + 'addEventListener/removeEventListener, addListener/removeListener, on/off method pair');
	  }

	  return fromSubUnsub(function (handler) {
	    return target[sub](eventName, handler);
	  }, function (handler) {
	    return target[unsub](eventName, handler);
	  }, transformer).setName('fromEvents');
	};

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var stream = __webpack_require__(17);

	var _require = __webpack_require__(21);

	var apply = _require.apply;

	module.exports = function fromSubUnsub(sub, unsub, transformer /* Function | falsey */) {
	  return stream(function (emitter) {

	    var handler = transformer ? function () {
	      emitter.emit(apply(transformer, this, arguments));
	    } : function (x) {
	      emitter.emit(x);
	    };

	    sub(handler);
	    return function () {
	      return unsub(handler);
	    };
	  }).setName('fromSubUnsub');
	};

/***/ },
/* 21 */
/***/ function(module, exports) {

	"use strict";

	function spread(fn, length) {
	  switch (length) {
	    case 0:
	      return function () {
	        return fn();
	      };
	    case 1:
	      return function (a) {
	        return fn(a[0]);
	      };
	    case 2:
	      return function (a) {
	        return fn(a[0], a[1]);
	      };
	    case 3:
	      return function (a) {
	        return fn(a[0], a[1], a[2]);
	      };
	    case 4:
	      return function (a) {
	        return fn(a[0], a[1], a[2], a[3]);
	      };
	    default:
	      return function (a) {
	        return fn.apply(null, a);
	      };
	  }
	}

	function apply(fn, c, a) {
	  var aLength = a ? a.length : 0;
	  if (c == null) {
	    switch (aLength) {
	      case 0:
	        return fn();
	      case 1:
	        return fn(a[0]);
	      case 2:
	        return fn(a[0], a[1]);
	      case 3:
	        return fn(a[0], a[1], a[2]);
	      case 4:
	        return fn(a[0], a[1], a[2], a[3]);
	      default:
	        return fn.apply(null, a);
	    }
	  } else {
	    switch (aLength) {
	      case 0:
	        return fn.call(c);
	      default:
	        return fn.apply(c, a);
	    }
	  }
	}

	module.exports = { spread: spread, apply: apply };

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(2);

	var inherit = _require.inherit;

	var Property = __webpack_require__(7);

	// HACK:
	//   We don't call parent Class constructor, but instead putting all necessary
	//   properties into prototype to simulate ended Property
	//   (see Propperty and Observable classes).

	function P(value) {
	  this._currentEvent = { type: 'value', value: value, current: true };
	}

	inherit(P, Property, {
	  _name: 'constant',
	  _active: false,
	  _activating: false,
	  _alive: false,
	  _dispatcher: null,
	  _logHandlers: null
	});

	module.exports = function constant(x) {
	  return new P(x);
	};

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(2);

	var inherit = _require.inherit;

	var Property = __webpack_require__(7);

	// HACK:
	//   We don't call parent Class constructor, but instead putting all necessary
	//   properties into prototype to simulate ended Property
	//   (see Propperty and Observable classes).

	function P(value) {
	  this._currentEvent = { type: 'error', value: value, current: true };
	}

	inherit(P, Property, {
	  _name: 'constantError',
	  _active: false,
	  _activating: false,
	  _alive: false,
	  _dispatcher: null,
	  _logHandlers: null
	});

	module.exports = function constantError(x) {
	  return new P(x);
	};

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(25);

	var createProperty = _require.createProperty;

	var P = createProperty('toProperty', {

	  _init: function _init(_ref) {
	    var fn = _ref.fn;

	    this._getInitialCurrent = fn;
	  },

	  _onActivation: function _onActivation() {
	    if (this._getInitialCurrent !== null) {
	      var getInitial = this._getInitialCurrent;
	      this._emitValue(getInitial());
	    }
	    this._source.onAny(this._$handleAny); // copied from patterns/one-source
	  }

	});

	module.exports = function toProperty(obs) {
	  var fn = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];

	  if (fn !== null && typeof fn !== 'function') {
	    throw new Error('You should call toProperty() with a function or no arguments.');
	  }
	  return new P(obs, { fn: fn });
	};

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Stream = __webpack_require__(6);
	var Property = __webpack_require__(7);

	var _require = __webpack_require__(2);

	var inherit = _require.inherit;

	var _require2 = __webpack_require__(3);

	var VALUE = _require2.VALUE;
	var ERROR = _require2.ERROR;
	var END = _require2.END;

	function createConstructor(BaseClass, name) {
	  return function AnonymousObservable(source, options) {
	    var _this = this;

	    BaseClass.call(this);
	    this._source = source;
	    this._name = source._name + '.' + name;
	    this._init(options);
	    this._$handleAny = function (event) {
	      return _this._handleAny(event);
	    };
	  };
	}

	function createClassMethods(BaseClass) {
	  return {

	    _init: function _init() {},
	    _free: function _free() {},

	    _handleValue: function _handleValue(x) {
	      this._emitValue(x);
	    },
	    _handleError: function _handleError(x) {
	      this._emitError(x);
	    },
	    _handleEnd: function _handleEnd() {
	      this._emitEnd();
	    },

	    _handleAny: function _handleAny(event) {
	      switch (event.type) {
	        case VALUE:
	          return this._handleValue(event.value);
	        case ERROR:
	          return this._handleError(event.value);
	        case END:
	          return this._handleEnd();
	      }
	    },

	    _onActivation: function _onActivation() {
	      this._source.onAny(this._$handleAny);
	    },
	    _onDeactivation: function _onDeactivation() {
	      this._source.offAny(this._$handleAny);
	    },

	    _clear: function _clear() {
	      BaseClass.prototype._clear.call(this);
	      this._source = null;
	      this._$handleAny = null;
	      this._free();
	    }

	  };
	}

	function createStream(name, mixin) {
	  var S = createConstructor(Stream, name);
	  inherit(S, Stream, createClassMethods(Stream), mixin);
	  return S;
	}

	function createProperty(name, mixin) {
	  var P = createConstructor(Property, name);
	  inherit(P, Property, createClassMethods(Property), mixin);
	  return P;
	}

	module.exports = { createStream: createStream, createProperty: createProperty };

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(25);

	var createStream = _require.createStream;

	var S = createStream('changes', {

	  _handleValue: function _handleValue(x) {
	    if (!this._activating) {
	      this._emitValue(x);
	    }
	  },

	  _handleError: function _handleError(x) {
	    if (!this._activating) {
	      this._emitError(x);
	    }
	  }

	});

	module.exports = function changes(obs) {
	  return new S(obs);
	};

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var stream = __webpack_require__(17);
	var toProperty = __webpack_require__(24);

	module.exports = function fromPromise(promise) {

	  var called = false;

	  var result = stream(function (emitter) {
	    if (!called) {
	      var onValue = function onValue(x) {
	        emitter.emit(x);
	        emitter.end();
	      };
	      var onError = function onError(x) {
	        emitter.error(x);
	        emitter.end();
	      };
	      var _promise = promise.then(onValue, onError);

	      // prevent libraries like 'Q' or 'when' from swallowing exceptions
	      if (_promise && typeof _promise.done === 'function') {
	        _promise.done();
	      }

	      called = true;
	    }
	  });

	  return toProperty(result, null).setName('fromPromise');
	};

/***/ },
/* 28 */
/***/ function(module, exports) {

	'use strict';

	function getGlodalPromise() {
	  if (typeof Promise === 'function') {
	    return Promise;
	  } else {
	    throw new Error('There isn\'t default Promise, use shim or parameter');
	  }
	}

	module.exports = function (obs) {
	  var Promise = arguments.length <= 1 || arguments[1] === undefined ? getGlodalPromise() : arguments[1];

	  var last = null;
	  return new Promise(function (resolve, reject) {
	    obs.onAny(function (event) {
	      if (event.type === 'end' && last !== null) {
	        (last.type === 'value' ? resolve : reject)(last.value);
	        last = null;
	      } else {
	        last = event;
	      }
	    });
	  });
	};

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var stream = __webpack_require__(17);
	var symbol = __webpack_require__(30)('observable');

	module.exports = function fromESObservable(_observable) {
	  var observable = _observable[symbol] ? _observable[symbol]() : _observable;
	  return stream(function (emitter) {
	    var unsub = observable.subscribe({
	      error: function error(_error) {
	        emitter.error(_error);
	        emitter.end();
	      },
	      next: function next(value) {
	        emitter.emit(value);
	      },
	      complete: function complete() {
	        emitter.end();
	      }
	    });

	    if (unsub.unsubscribe) {
	      return function () {
	        unsub.unsubscribe();
	      };
	    } else {
	      return unsub;
	    }
	  }).setName('fromESObservable');
	};

/***/ },
/* 30 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function (key) {
	  if (typeof Symbol !== 'undefined' && Symbol[key]) {
	    return Symbol[key];
	  } else if (typeof Symbol !== 'undefined' && typeof Symbol['for'] === 'function') {
	    return Symbol['for'](key);
	  } else {
	    return '@@' + key;
	  }
	};

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _require = __webpack_require__(2);

	var extend = _require.extend;

	function ESObservable(observable) {
	  this._observable = observable.takeErrors(1);
	}

	extend(ESObservable.prototype, {
	  subscribe: function subscribe(observer) {
	    var _this = this;

	    var fn = function fn(event) {
	      if (event.type === "value" && observer.next) {
	        observer.next(event.value);
	      } else if (event.type == "error" && observer.error) {
	        observer.error(event.value);
	      } else if (event.type === "end" && observer.complete) {
	        observer.complete(event.value);
	      }
	    };

	    this._observable.onAny(fn);
	    return function () {
	      return _this._observable.offAny(fn);
	    };
	  }
	});

	module.exports = function toESObservable() {
	  return new ESObservable(this);
	};

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(25);

	var createStream = _require.createStream;
	var createProperty = _require.createProperty;

	var mixin = {

	  _init: function _init(_ref) {
	    var fn = _ref.fn;

	    this._fn = fn;
	  },

	  _free: function _free() {
	    this._fn = null;
	  },

	  _handleValue: function _handleValue(x) {
	    var fn = this._fn;
	    this._emitValue(fn(x));
	  }

	};

	var S = createStream('map', mixin);
	var P = createProperty('map', mixin);

	var id = function id(x) {
	  return x;
	};

	module.exports = function map(obs) {
	  var fn = arguments.length <= 1 || arguments[1] === undefined ? id : arguments[1];

	  return new (obs._ofSameType(S, P))(obs, { fn: fn });
	};

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(25);

	var createStream = _require.createStream;
	var createProperty = _require.createProperty;

	var mixin = {

	  _init: function _init(_ref) {
	    var fn = _ref.fn;

	    this._fn = fn;
	  },

	  _free: function _free() {
	    this._fn = null;
	  },

	  _handleValue: function _handleValue(x) {
	    var fn = this._fn;
	    if (fn(x)) {
	      this._emitValue(x);
	    }
	  }

	};

	var S = createStream('filter', mixin);
	var P = createProperty('filter', mixin);

	var id = function id(x) {
	  return x;
	};

	module.exports = function filter(obs) {
	  var fn = arguments.length <= 1 || arguments[1] === undefined ? id : arguments[1];

	  return new (obs._ofSameType(S, P))(obs, { fn: fn });
	};

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(25);

	var createStream = _require.createStream;
	var createProperty = _require.createProperty;

	var mixin = {

	  _init: function _init(_ref) {
	    var n = _ref.n;

	    this._n = n;
	    if (n <= 0) {
	      this._emitEnd();
	    }
	  },

	  _handleValue: function _handleValue(x) {
	    this._n--;
	    this._emitValue(x);
	    if (this._n === 0) {
	      this._emitEnd();
	    }
	  }

	};

	var S = createStream('take', mixin);
	var P = createProperty('take', mixin);

	module.exports = function take(obs, n) {
	  return new (obs._ofSameType(S, P))(obs, { n: n });
	};

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(25);

	var createStream = _require.createStream;
	var createProperty = _require.createProperty;

	var mixin = {

	  _init: function _init(_ref) {
	    var n = _ref.n;

	    this._n = n;
	    if (n <= 0) {
	      this._emitEnd();
	    }
	  },

	  _handleError: function _handleError(x) {
	    this._n--;
	    this._emitError(x);
	    if (this._n === 0) {
	      this._emitEnd();
	    }
	  }

	};

	var S = createStream('takeErrors', mixin);
	var P = createProperty('takeErrors', mixin);

	module.exports = function takeErrors(obs, n) {
	  return new (obs._ofSameType(S, P))(obs, { n: n });
	};

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(25);

	var createStream = _require.createStream;
	var createProperty = _require.createProperty;

	var mixin = {

	  _init: function _init(_ref) {
	    var fn = _ref.fn;

	    this._fn = fn;
	  },

	  _free: function _free() {
	    this._fn = null;
	  },

	  _handleValue: function _handleValue(x) {
	    var fn = this._fn;
	    if (fn(x)) {
	      this._emitValue(x);
	    } else {
	      this._emitEnd();
	    }
	  }

	};

	var S = createStream('takeWhile', mixin);
	var P = createProperty('takeWhile', mixin);

	var id = function id(x) {
	  return x;
	};

	module.exports = function takeWhile(obs) {
	  var fn = arguments.length <= 1 || arguments[1] === undefined ? id : arguments[1];

	  return new (obs._ofSameType(S, P))(obs, { fn: fn });
	};

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(25);

	var createStream = _require.createStream;
	var createProperty = _require.createProperty;

	var _require2 = __webpack_require__(3);

	var NOTHING = _require2.NOTHING;

	var mixin = {

	  _init: function _init() {
	    this._lastValue = NOTHING;
	  },

	  _free: function _free() {
	    this._lastValue = null;
	  },

	  _handleValue: function _handleValue(x) {
	    this._lastValue = x;
	  },

	  _handleEnd: function _handleEnd() {
	    if (this._lastValue !== NOTHING) {
	      this._emitValue(this._lastValue);
	    }
	    this._emitEnd();
	  }

	};

	var S = createStream('last', mixin);
	var P = createProperty('last', mixin);

	module.exports = function last(obs) {
	  return new (obs._ofSameType(S, P))(obs);
	};

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(25);

	var createStream = _require.createStream;
	var createProperty = _require.createProperty;

	var mixin = {

	  _init: function _init(_ref) {
	    var n = _ref.n;

	    this._n = Math.max(0, n);
	  },

	  _handleValue: function _handleValue(x) {
	    if (this._n === 0) {
	      this._emitValue(x);
	    } else {
	      this._n--;
	    }
	  }

	};

	var S = createStream('skip', mixin);
	var P = createProperty('skip', mixin);

	module.exports = function skip(obs, n) {
	  return new (obs._ofSameType(S, P))(obs, { n: n });
	};

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(25);

	var createStream = _require.createStream;
	var createProperty = _require.createProperty;

	var mixin = {

	  _init: function _init(_ref) {
	    var fn = _ref.fn;

	    this._fn = fn;
	  },

	  _free: function _free() {
	    this._fn = null;
	  },

	  _handleValue: function _handleValue(x) {
	    var fn = this._fn;
	    if (this._fn !== null && !fn(x)) {
	      this._fn = null;
	    }
	    if (this._fn === null) {
	      this._emitValue(x);
	    }
	  }

	};

	var S = createStream('skipWhile', mixin);
	var P = createProperty('skipWhile', mixin);

	var id = function id(x) {
	  return x;
	};

	module.exports = function skipWhile(obs) {
	  var fn = arguments.length <= 1 || arguments[1] === undefined ? id : arguments[1];

	  return new (obs._ofSameType(S, P))(obs, { fn: fn });
	};

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(25);

	var createStream = _require.createStream;
	var createProperty = _require.createProperty;

	var _require2 = __webpack_require__(3);

	var NOTHING = _require2.NOTHING;

	var mixin = {

	  _init: function _init(_ref) {
	    var fn = _ref.fn;

	    this._fn = fn;
	    this._prev = NOTHING;
	  },

	  _free: function _free() {
	    this._fn = null;
	    this._prev = null;
	  },

	  _handleValue: function _handleValue(x) {
	    var fn = this._fn;
	    if (this._prev === NOTHING || !fn(this._prev, x)) {
	      this._prev = x;
	      this._emitValue(x);
	    }
	  }

	};

	var S = createStream('skipDuplicates', mixin);
	var P = createProperty('skipDuplicates', mixin);

	var eq = function eq(a, b) {
	  return a === b;
	};

	module.exports = function skipDuplicates(obs) {
	  var fn = arguments.length <= 1 || arguments[1] === undefined ? eq : arguments[1];

	  return new (obs._ofSameType(S, P))(obs, { fn: fn });
	};

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(25);

	var createStream = _require.createStream;
	var createProperty = _require.createProperty;

	var _require2 = __webpack_require__(3);

	var NOTHING = _require2.NOTHING;

	var mixin = {

	  _init: function _init(_ref) {
	    var fn = _ref.fn;
	    var seed = _ref.seed;

	    this._fn = fn;
	    this._prev = seed;
	  },

	  _free: function _free() {
	    this._prev = null;
	    this._fn = null;
	  },

	  _handleValue: function _handleValue(x) {
	    if (this._prev !== NOTHING) {
	      var fn = this._fn;
	      this._emitValue(fn(this._prev, x));
	    }
	    this._prev = x;
	  }

	};

	var S = createStream('diff', mixin);
	var P = createProperty('diff', mixin);

	function defaultFn(a, b) {
	  return [a, b];
	}

	module.exports = function diff(obs, fn) {
	  var seed = arguments.length <= 2 || arguments[2] === undefined ? NOTHING : arguments[2];

	  return new (obs._ofSameType(S, P))(obs, { fn: fn || defaultFn, seed: seed });
	};

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(25);

	var createProperty = _require.createProperty;

	var _require2 = __webpack_require__(3);

	var ERROR = _require2.ERROR;
	var NOTHING = _require2.NOTHING;

	var P = createProperty('scan', {

	  _init: function _init(_ref) {
	    var fn = _ref.fn;
	    var seed = _ref.seed;

	    this._fn = fn;
	    this._seed = seed;
	    if (seed !== NOTHING) {
	      this._emitValue(seed);
	    }
	  },

	  _free: function _free() {
	    this._fn = null;
	    this._seed = null;
	  },

	  _handleValue: function _handleValue(x) {
	    var fn = this._fn;
	    if (this._currentEvent === null || this._currentEvent.type === ERROR) {
	      this._emitValue(this._seed === NOTHING ? x : fn(this._seed, x));
	    } else {
	      this._emitValue(fn(this._currentEvent.value, x));
	    }
	  }

	});

	module.exports = function scan(obs, fn) {
	  var seed = arguments.length <= 2 || arguments[2] === undefined ? NOTHING : arguments[2];

	  return new P(obs, { fn: fn, seed: seed });
	};

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(25);

	var createStream = _require.createStream;

	var mixin = {

	  _init: function _init(_ref) {
	    var fn = _ref.fn;

	    this._fn = fn;
	  },

	  _free: function _free() {
	    this._fn = null;
	  },

	  _handleValue: function _handleValue(x) {
	    var fn = this._fn;
	    var xs = fn(x);
	    for (var i = 0; i < xs.length; i++) {
	      this._emitValue(xs[i]);
	    }
	  }

	};

	var S = createStream('flatten', mixin);

	var id = function id(x) {
	  return x;
	};

	module.exports = function flatten(obs) {
	  var fn = arguments.length <= 1 || arguments[1] === undefined ? id : arguments[1];

	  return new S(obs, { fn: fn });
	};

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(25);

	var createStream = _require.createStream;
	var createProperty = _require.createProperty;

	var END_MARKER = {};

	var mixin = {

	  _init: function _init(_ref) {
	    var _this = this;

	    var wait = _ref.wait;

	    this._wait = Math.max(0, wait);
	    this._buff = [];
	    this._$shiftBuff = function () {
	      var value = _this._buff.shift();
	      if (value === END_MARKER) {
	        _this._emitEnd();
	      } else {
	        _this._emitValue(value);
	      }
	    };
	  },

	  _free: function _free() {
	    this._buff = null;
	    this._$shiftBuff = null;
	  },

	  _handleValue: function _handleValue(x) {
	    if (this._activating) {
	      this._emitValue(x);
	    } else {
	      this._buff.push(x);
	      setTimeout(this._$shiftBuff, this._wait);
	    }
	  },

	  _handleEnd: function _handleEnd() {
	    if (this._activating) {
	      this._emitEnd();
	    } else {
	      this._buff.push(END_MARKER);
	      setTimeout(this._$shiftBuff, this._wait);
	    }
	  }

	};

	var S = createStream('delay', mixin);
	var P = createProperty('delay', mixin);

	module.exports = function delay(obs, wait) {
	  return new (obs._ofSameType(S, P))(obs, { wait: wait });
	};

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(25);

	var createStream = _require.createStream;
	var createProperty = _require.createProperty;

	var now = __webpack_require__(46);

	var mixin = {

	  _init: function _init(_ref) {
	    var _this = this;

	    var wait = _ref.wait;
	    var leading = _ref.leading;
	    var trailing = _ref.trailing;

	    this._wait = Math.max(0, wait);
	    this._leading = leading;
	    this._trailing = trailing;
	    this._trailingValue = null;
	    this._timeoutId = null;
	    this._endLater = false;
	    this._lastCallTime = 0;
	    this._$trailingCall = function () {
	      return _this._trailingCall();
	    };
	  },

	  _free: function _free() {
	    this._trailingValue = null;
	    this._$trailingCall = null;
	  },

	  _handleValue: function _handleValue(x) {
	    if (this._activating) {
	      this._emitValue(x);
	    } else {
	      var curTime = now();
	      if (this._lastCallTime === 0 && !this._leading) {
	        this._lastCallTime = curTime;
	      }
	      var remaining = this._wait - (curTime - this._lastCallTime);
	      if (remaining <= 0) {
	        this._cancelTrailing();
	        this._lastCallTime = curTime;
	        this._emitValue(x);
	      } else if (this._trailing) {
	        this._cancelTrailing();
	        this._trailingValue = x;
	        this._timeoutId = setTimeout(this._$trailingCall, remaining);
	      }
	    }
	  },

	  _handleEnd: function _handleEnd() {
	    if (this._activating) {
	      this._emitEnd();
	    } else {
	      if (this._timeoutId) {
	        this._endLater = true;
	      } else {
	        this._emitEnd();
	      }
	    }
	  },

	  _cancelTrailing: function _cancelTrailing() {
	    if (this._timeoutId !== null) {
	      clearTimeout(this._timeoutId);
	      this._timeoutId = null;
	    }
	  },

	  _trailingCall: function _trailingCall() {
	    this._emitValue(this._trailingValue);
	    this._timeoutId = null;
	    this._trailingValue = null;
	    this._lastCallTime = !this._leading ? 0 : now();
	    if (this._endLater) {
	      this._emitEnd();
	    }
	  }

	};

	var S = createStream('throttle', mixin);
	var P = createProperty('throttle', mixin);

	module.exports = function throttle(obs, wait) {
	  var _ref2 = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	  var _ref2$leading = _ref2.leading;
	  var leading = _ref2$leading === undefined ? true : _ref2$leading;
	  var _ref2$trailing = _ref2.trailing;
	  var trailing = _ref2$trailing === undefined ? true : _ref2$trailing;

	  return new (obs._ofSameType(S, P))(obs, { wait: wait, leading: leading, trailing: trailing });
	};

/***/ },
/* 46 */
/***/ function(module, exports) {

	"use strict";

	module.exports = Date.now ? function () {
	  return Date.now();
	} : function () {
	  return new Date().getTime();
	};

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(25);

	var createStream = _require.createStream;
	var createProperty = _require.createProperty;

	var now = __webpack_require__(46);

	var mixin = {

	  _init: function _init(_ref) {
	    var _this = this;

	    var wait = _ref.wait;
	    var immediate = _ref.immediate;

	    this._wait = Math.max(0, wait);
	    this._immediate = immediate;
	    this._lastAttempt = 0;
	    this._timeoutId = null;
	    this._laterValue = null;
	    this._endLater = false;
	    this._$later = function () {
	      return _this._later();
	    };
	  },

	  _free: function _free() {
	    this._laterValue = null;
	    this._$later = null;
	  },

	  _handleValue: function _handleValue(x) {
	    if (this._activating) {
	      this._emitValue(x);
	    } else {
	      this._lastAttempt = now();
	      if (this._immediate && !this._timeoutId) {
	        this._emitValue(x);
	      }
	      if (!this._timeoutId) {
	        this._timeoutId = setTimeout(this._$later, this._wait);
	      }
	      if (!this._immediate) {
	        this._laterValue = x;
	      }
	    }
	  },

	  _handleEnd: function _handleEnd() {
	    if (this._activating) {
	      this._emitEnd();
	    } else {
	      if (this._timeoutId && !this._immediate) {
	        this._endLater = true;
	      } else {
	        this._emitEnd();
	      }
	    }
	  },

	  _later: function _later() {
	    var last = now() - this._lastAttempt;
	    if (last < this._wait && last >= 0) {
	      this._timeoutId = setTimeout(this._$later, this._wait - last);
	    } else {
	      this._timeoutId = null;
	      if (!this._immediate) {
	        this._emitValue(this._laterValue);
	        this._laterValue = null;
	      }
	      if (this._endLater) {
	        this._emitEnd();
	      }
	    }
	  }

	};

	var S = createStream('debounce', mixin);
	var P = createProperty('debounce', mixin);

	module.exports = function debounce(obs, wait) {
	  var _ref2 = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	  var _ref2$immediate = _ref2.immediate;
	  var immediate = _ref2$immediate === undefined ? false : _ref2$immediate;

	  return new (obs._ofSameType(S, P))(obs, { wait: wait, immediate: immediate });
	};

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(25);

	var createStream = _require.createStream;
	var createProperty = _require.createProperty;

	var mixin = {

	  _init: function _init(_ref) {
	    var fn = _ref.fn;

	    this._fn = fn;
	  },

	  _free: function _free() {
	    this._fn = null;
	  },

	  _handleError: function _handleError(x) {
	    var fn = this._fn;
	    this._emitError(fn(x));
	  }

	};

	var S = createStream('mapErrors', mixin);
	var P = createProperty('mapErrors', mixin);

	var id = function id(x) {
	  return x;
	};

	module.exports = function mapErrors(obs) {
	  var fn = arguments.length <= 1 || arguments[1] === undefined ? id : arguments[1];

	  return new (obs._ofSameType(S, P))(obs, { fn: fn });
	};

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(25);

	var createStream = _require.createStream;
	var createProperty = _require.createProperty;

	var mixin = {

	  _init: function _init(_ref) {
	    var fn = _ref.fn;

	    this._fn = fn;
	  },

	  _free: function _free() {
	    this._fn = null;
	  },

	  _handleError: function _handleError(x) {
	    var fn = this._fn;
	    if (fn(x)) {
	      this._emitError(x);
	    }
	  }

	};

	var S = createStream('filterErrors', mixin);
	var P = createProperty('filterErrors', mixin);

	var id = function id(x) {
	  return x;
	};

	module.exports = function filterErrors(obs) {
	  var fn = arguments.length <= 1 || arguments[1] === undefined ? id : arguments[1];

	  return new (obs._ofSameType(S, P))(obs, { fn: fn });
	};

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(25);

	var createStream = _require.createStream;
	var createProperty = _require.createProperty;

	var mixin = {
	  _handleValue: function _handleValue() {}
	};

	var S = createStream('ignoreValues', mixin);
	var P = createProperty('ignoreValues', mixin);

	module.exports = function ignoreValues(obs) {
	  return new (obs._ofSameType(S, P))(obs);
	};

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(25);

	var createStream = _require.createStream;
	var createProperty = _require.createProperty;

	var mixin = {
	  _handleError: function _handleError() {}
	};

	var S = createStream('ignoreErrors', mixin);
	var P = createProperty('ignoreErrors', mixin);

	module.exports = function ignoreErrors(obs) {
	  return new (obs._ofSameType(S, P))(obs);
	};

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(25);

	var createStream = _require.createStream;
	var createProperty = _require.createProperty;

	var mixin = {
	  _handleEnd: function _handleEnd() {}
	};

	var S = createStream('ignoreEnd', mixin);
	var P = createProperty('ignoreEnd', mixin);

	module.exports = function ignoreEnd(obs) {
	  return new (obs._ofSameType(S, P))(obs);
	};

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(25);

	var createStream = _require.createStream;
	var createProperty = _require.createProperty;

	var mixin = {

	  _init: function _init(_ref) {
	    var fn = _ref.fn;

	    this._fn = fn;
	  },

	  _free: function _free() {
	    this._fn = null;
	  },

	  _handleEnd: function _handleEnd() {
	    var fn = this._fn;
	    this._emitValue(fn());
	    this._emitEnd();
	  }

	};

	var S = createStream('beforeEnd', mixin);
	var P = createProperty('beforeEnd', mixin);

	module.exports = function beforeEnd(obs, fn) {
	  return new (obs._ofSameType(S, P))(obs, { fn: fn });
	};

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(25);

	var createStream = _require.createStream;
	var createProperty = _require.createProperty;

	var _require2 = __webpack_require__(5);

	var slide = _require2.slide;

	var mixin = {

	  _init: function _init(_ref) {
	    var min = _ref.min;
	    var max = _ref.max;

	    this._max = max;
	    this._min = min;
	    this._buff = [];
	  },

	  _free: function _free() {
	    this._buff = null;
	  },

	  _handleValue: function _handleValue(x) {
	    this._buff = slide(this._buff, x, this._max);
	    if (this._buff.length >= this._min) {
	      this._emitValue(this._buff);
	    }
	  }

	};

	var S = createStream('slidingWindow', mixin);
	var P = createProperty('slidingWindow', mixin);

	module.exports = function slidingWindow(obs, max) {
	  var min = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];

	  return new (obs._ofSameType(S, P))(obs, { min: min, max: max });
	};

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(25);

	var createStream = _require.createStream;
	var createProperty = _require.createProperty;

	var mixin = {

	  _init: function _init(_ref) {
	    var fn = _ref.fn;
	    var flushOnEnd = _ref.flushOnEnd;

	    this._fn = fn;
	    this._flushOnEnd = flushOnEnd;
	    this._buff = [];
	  },

	  _free: function _free() {
	    this._buff = null;
	  },

	  _flush: function _flush() {
	    if (this._buff !== null && this._buff.length !== 0) {
	      this._emitValue(this._buff);
	      this._buff = [];
	    }
	  },

	  _handleValue: function _handleValue(x) {
	    this._buff.push(x);
	    var fn = this._fn;
	    if (!fn(x)) {
	      this._flush();
	    }
	  },

	  _handleEnd: function _handleEnd() {
	    if (this._flushOnEnd) {
	      this._flush();
	    }
	    this._emitEnd();
	  }

	};

	var S = createStream('bufferWhile', mixin);
	var P = createProperty('bufferWhile', mixin);

	var id = function id(x) {
	  return x;
	};

	module.exports = function bufferWhile(obs, fn) {
	  var _ref2 = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	  var _ref2$flushOnEnd = _ref2.flushOnEnd;
	  var flushOnEnd = _ref2$flushOnEnd === undefined ? true : _ref2$flushOnEnd;

	  return new (obs._ofSameType(S, P))(obs, { fn: fn || id, flushOnEnd: flushOnEnd });
	};

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(25);

	var createStream = _require.createStream;
	var createProperty = _require.createProperty;

	function xformForObs(obs) {
	  return {

	    '@@transducer/step': function transducerStep(res, input) {
	      obs._emitValue(input);
	      return null;
	    },

	    '@@transducer/result': function transducerResult() {
	      obs._emitEnd();
	      return null;
	    }

	  };
	}

	var mixin = {

	  _init: function _init(_ref) {
	    var transducer = _ref.transducer;

	    this._xform = transducer(xformForObs(this));
	  },

	  _free: function _free() {
	    this._xform = null;
	  },

	  _handleValue: function _handleValue(x) {
	    if (this._xform['@@transducer/step'](null, x) !== null) {
	      this._xform['@@transducer/result'](null);
	    }
	  },

	  _handleEnd: function _handleEnd() {
	    this._xform['@@transducer/result'](null);
	  }

	};

	var S = createStream('transduce', mixin);
	var P = createProperty('transduce', mixin);

	module.exports = function transduce(obs, transducer) {
	  return new (obs._ofSameType(S, P))(obs, { transducer: transducer });
	};

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(25);

	var createStream = _require.createStream;
	var createProperty = _require.createProperty;

	var emitter = __webpack_require__(15);

	var mixin = {

	  _init: function _init(_ref) {
	    var fn = _ref.fn;

	    this._handler = fn;
	    this._emitter = emitter(this);
	  },

	  _free: function _free() {
	    this._handler = null;
	    this._emitter = null;
	  },

	  _handleAny: function _handleAny(event) {
	    this._handler(this._emitter, event);
	  }

	};

	var S = createStream('withHandler', mixin);
	var P = createProperty('withHandler', mixin);

	module.exports = function withHandler(obs, fn) {
	  return new (obs._ofSameType(S, P))(obs, { fn: fn });
	};

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Stream = __webpack_require__(6);

	var _require = __webpack_require__(3);

	var VALUE = _require.VALUE;
	var ERROR = _require.ERROR;
	var NOTHING = _require.NOTHING;

	var _require2 = __webpack_require__(2);

	var inherit = _require2.inherit;

	var _require3 = __webpack_require__(5);

	var concat = _require3.concat;
	var fillArray = _require3.fillArray;

	var _require4 = __webpack_require__(21);

	var spread = _require4.spread;

	var never = __webpack_require__(8);

	function defaultErrorsCombinator(errors) {
	  var latestError = undefined;
	  for (var i = 0; i < errors.length; i++) {
	    if (errors[i] !== undefined) {
	      if (latestError === undefined || latestError.index < errors[i].index) {
	        latestError = errors[i];
	      }
	    }
	  }
	  return latestError.error;
	}

	function Combine(active, passive, combinator) {
	  var _this = this;

	  Stream.call(this);
	  this._activeCount = active.length;
	  this._sources = concat(active, passive);
	  this._combinator = combinator ? spread(combinator, this._sources.length) : function (x) {
	    return x;
	  };
	  this._aliveCount = 0;
	  this._latestValues = new Array(this._sources.length);
	  this._latestErrors = new Array(this._sources.length);
	  fillArray(this._latestValues, NOTHING);
	  this._emitAfterActivation = false;
	  this._endAfterActivation = false;
	  this._latestErrorIndex = 0;

	  this._$handlers = [];

	  var _loop = function (i) {
	    _this._$handlers.push(function (event) {
	      return _this._handleAny(i, event);
	    });
	  };

	  for (var i = 0; i < this._sources.length; i++) {
	    _loop(i);
	  }
	}

	inherit(Combine, Stream, {

	  _name: 'combine',

	  _onActivation: function _onActivation() {
	    this._aliveCount = this._activeCount;

	    // we need to suscribe to _passive_ sources before _active_
	    // (see https://github.com/rpominov/kefir/issues/98)
	    for (var i = this._activeCount; i < this._sources.length; i++) {
	      this._sources[i].onAny(this._$handlers[i]);
	    }
	    for (var i = 0; i < this._activeCount; i++) {
	      this._sources[i].onAny(this._$handlers[i]);
	    }

	    if (this._emitAfterActivation) {
	      this._emitAfterActivation = false;
	      this._emitIfFull();
	    }
	    if (this._endAfterActivation) {
	      this._emitEnd();
	    }
	  },

	  _onDeactivation: function _onDeactivation() {
	    var length = this._sources.length,
	        i = undefined;
	    for (i = 0; i < length; i++) {
	      this._sources[i].offAny(this._$handlers[i]);
	    }
	  },

	  _emitIfFull: function _emitIfFull() {
	    var hasAllValues = true;
	    var hasErrors = false;
	    var length = this._latestValues.length;
	    var valuesCopy = new Array(length);
	    var errorsCopy = new Array(length);

	    for (var i = 0; i < length; i++) {
	      valuesCopy[i] = this._latestValues[i];
	      errorsCopy[i] = this._latestErrors[i];

	      if (valuesCopy[i] === NOTHING) {
	        hasAllValues = false;
	      }

	      if (errorsCopy[i] !== undefined) {
	        hasErrors = true;
	      }
	    }

	    if (hasAllValues) {
	      var combinator = this._combinator;
	      this._emitValue(combinator(valuesCopy));
	    }
	    if (hasErrors) {
	      this._emitError(defaultErrorsCombinator(errorsCopy));
	    }
	  },

	  _handleAny: function _handleAny(i, event) {

	    if (event.type === VALUE || event.type === ERROR) {

	      if (event.type === VALUE) {
	        this._latestValues[i] = event.value;
	        this._latestErrors[i] = undefined;
	      }
	      if (event.type === ERROR) {
	        this._latestValues[i] = NOTHING;
	        this._latestErrors[i] = {
	          index: this._latestErrorIndex++,
	          error: event.value
	        };
	      }

	      if (i < this._activeCount) {
	        if (this._activating) {
	          this._emitAfterActivation = true;
	        } else {
	          this._emitIfFull();
	        }
	      }
	    } else {
	      // END

	      if (i < this._activeCount) {
	        this._aliveCount--;
	        if (this._aliveCount === 0) {
	          if (this._activating) {
	            this._endAfterActivation = true;
	          } else {
	            this._emitEnd();
	          }
	        }
	      }
	    }
	  },

	  _clear: function _clear() {
	    Stream.prototype._clear.call(this);
	    this._sources = null;
	    this._latestValues = null;
	    this._latestErrors = null;
	    this._combinator = null;
	    this._$handlers = null;
	  }

	});

	module.exports = function combine(active, passive, combinator) {
	  if (passive === undefined) passive = [];

	  if (typeof passive === 'function') {
	    combinator = passive;
	    passive = [];
	  }
	  return active.length === 0 ? never() : new Combine(active, passive, combinator);
	};

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Stream = __webpack_require__(6);

	var _require = __webpack_require__(3);

	var VALUE = _require.VALUE;
	var ERROR = _require.ERROR;
	var END = _require.END;

	var _require2 = __webpack_require__(2);

	var inherit = _require2.inherit;

	var _require3 = __webpack_require__(5);

	var map = _require3.map;
	var cloneArray = _require3.cloneArray;

	var _require4 = __webpack_require__(21);

	var spread = _require4.spread;

	var never = __webpack_require__(8);

	var isArray = Array.isArray || function (xs) {
	  return Object.prototype.toString.call(xs) === '[object Array]';
	};

	function Zip(sources, combinator) {
	  var _this = this;

	  Stream.call(this);

	  this._buffers = map(sources, function (source) {
	    return isArray(source) ? cloneArray(source) : [];
	  });
	  this._sources = map(sources, function (source) {
	    return isArray(source) ? never() : source;
	  });

	  this._combinator = combinator ? spread(combinator, this._sources.length) : function (x) {
	    return x;
	  };
	  this._aliveCount = 0;

	  this._$handlers = [];

	  var _loop = function (i) {
	    _this._$handlers.push(function (event) {
	      return _this._handleAny(i, event);
	    });
	  };

	  for (var i = 0; i < this._sources.length; i++) {
	    _loop(i);
	  }
	}

	inherit(Zip, Stream, {

	  _name: 'zip',

	  _onActivation: function _onActivation() {

	    // if all sources are arrays
	    while (this._isFull()) {
	      this._emit();
	    }

	    var length = this._sources.length;
	    this._aliveCount = length;
	    for (var i = 0; i < length && this._active; i++) {
	      this._sources[i].onAny(this._$handlers[i]);
	    }
	  },

	  _onDeactivation: function _onDeactivation() {
	    for (var i = 0; i < this._sources.length; i++) {
	      this._sources[i].offAny(this._$handlers[i]);
	    }
	  },

	  _emit: function _emit() {
	    var values = new Array(this._buffers.length);
	    for (var i = 0; i < this._buffers.length; i++) {
	      values[i] = this._buffers[i].shift();
	    }
	    var combinator = this._combinator;
	    this._emitValue(combinator(values));
	  },

	  _isFull: function _isFull() {
	    for (var i = 0; i < this._buffers.length; i++) {
	      if (this._buffers[i].length === 0) {
	        return false;
	      }
	    }
	    return true;
	  },

	  _handleAny: function _handleAny(i, event) {
	    if (event.type === VALUE) {
	      this._buffers[i].push(event.value);
	      if (this._isFull()) {
	        this._emit();
	      }
	    }
	    if (event.type === ERROR) {
	      this._emitError(event.value);
	    }
	    if (event.type === END) {
	      this._aliveCount--;
	      if (this._aliveCount === 0) {
	        this._emitEnd();
	      }
	    }
	  },

	  _clear: function _clear() {
	    Stream.prototype._clear.call(this);
	    this._sources = null;
	    this._buffers = null;
	    this._combinator = null;
	    this._$handlers = null;
	  }

	});

	module.exports = function zip(observables, combinator /* Function | falsey */) {
	  return observables.length === 0 ? never() : new Zip(observables, combinator);
	};

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(2);

	var inherit = _require.inherit;

	var AbstractPool = __webpack_require__(61);
	var never = __webpack_require__(8);

	function Merge(sources) {
	  AbstractPool.call(this);
	  this._addAll(sources);
	  this._initialised = true;
	}

	inherit(Merge, AbstractPool, {

	  _name: 'merge',

	  _onEmpty: function _onEmpty() {
	    if (this._initialised) {
	      this._emitEnd();
	    }
	  }

	});

	module.exports = function merge(observables) {
	  return observables.length === 0 ? never() : new Merge(observables);
	};

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Stream = __webpack_require__(6);

	var _require = __webpack_require__(3);

	var VALUE = _require.VALUE;
	var ERROR = _require.ERROR;

	var _require2 = __webpack_require__(2);

	var inherit = _require2.inherit;

	var _require3 = __webpack_require__(5);

	var concat = _require3.concat;
	var forEach = _require3.forEach;
	var findByPred = _require3.findByPred;
	var find = _require3.find;
	var remove = _require3.remove;
	var cloneArray = _require3.cloneArray;

	var id = function id(x) {
	  return x;
	};

	function AbstractPool() {
	  var _this = this;

	  var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  var _ref$queueLim = _ref.queueLim;
	  var queueLim = _ref$queueLim === undefined ? 0 : _ref$queueLim;
	  var _ref$concurLim = _ref.concurLim;
	  var concurLim = _ref$concurLim === undefined ? -1 : _ref$concurLim;
	  var _ref$drop = _ref.drop;
	  var drop = _ref$drop === undefined ? 'new' : _ref$drop;

	  Stream.call(this);

	  this._queueLim = queueLim < 0 ? -1 : queueLim;
	  this._concurLim = concurLim < 0 ? -1 : concurLim;
	  this._drop = drop;
	  this._queue = [];
	  this._curSources = [];
	  this._$handleSubAny = function (event) {
	    return _this._handleSubAny(event);
	  };
	  this._$endHandlers = [];
	  this._currentlyAdding = null;

	  if (this._concurLim === 0) {
	    this._emitEnd();
	  }
	}

	inherit(AbstractPool, Stream, {

	  _name: 'abstractPool',

	  _add: function _add(obj, toObs /* Function | falsey */) {
	    toObs = toObs || id;
	    if (this._concurLim === -1 || this._curSources.length < this._concurLim) {
	      this._addToCur(toObs(obj));
	    } else {
	      if (this._queueLim === -1 || this._queue.length < this._queueLim) {
	        this._addToQueue(toObs(obj));
	      } else if (this._drop === 'old') {
	        this._removeOldest();
	        this._add(obj, toObs);
	      }
	    }
	  },

	  _addAll: function _addAll(obss) {
	    var _this2 = this;

	    forEach(obss, function (obs) {
	      return _this2._add(obs);
	    });
	  },

	  _remove: function _remove(obs) {
	    if (this._removeCur(obs) === -1) {
	      this._removeQueue(obs);
	    }
	  },

	  _addToQueue: function _addToQueue(obs) {
	    this._queue = concat(this._queue, [obs]);
	  },

	  _addToCur: function _addToCur(obs) {
	    if (this._active) {

	      // HACK:
	      //
	      // We have two optimizations for cases when `obs` is ended. We don't want
	      // to add such observable to the list, but only want to emit events
	      // from it (if it has some).
	      //
	      // Instead of this hacks, we could just did following,
	      // but it would be 5-8 times slower:
	      //
	      //     this._curSources = concat(this._curSources, [obs]);
	      //     this._subscribe(obs);
	      //

	      // #1
	      // This one for cases when `obs` already ended
	      // e.g., Kefir.constant() or Kefir.never()
	      if (!obs._alive) {
	        if (obs._currentEvent) {
	          this._emit(obs._currentEvent.type, obs._currentEvent.value);
	        }
	        return;
	      }

	      // #2
	      // This one is for cases when `obs` going to end synchronously on
	      // first subscriber e.g., Kefir.stream(em => {em.emit(1); em.end()})
	      this._currentlyAdding = obs;
	      obs.onAny(this._$handleSubAny);
	      this._currentlyAdding = null;
	      if (obs._alive) {
	        this._curSources = concat(this._curSources, [obs]);
	        if (this._active) {
	          this._subToEnd(obs);
	        }
	      }
	    } else {
	      this._curSources = concat(this._curSources, [obs]);
	    }
	  },

	  _subToEnd: function _subToEnd(obs) {
	    var _this3 = this;

	    var onEnd = function onEnd() {
	      return _this3._removeCur(obs);
	    };
	    this._$endHandlers.push({ obs: obs, handler: onEnd });
	    obs.onEnd(onEnd);
	  },

	  _subscribe: function _subscribe(obs) {
	    obs.onAny(this._$handleSubAny);

	    // it can become inactive in responce of subscribing to `obs.onAny` above
	    if (this._active) {
	      this._subToEnd(obs);
	    }
	  },

	  _unsubscribe: function _unsubscribe(obs) {
	    obs.offAny(this._$handleSubAny);

	    var onEndI = findByPred(this._$endHandlers, function (obj) {
	      return obj.obs === obs;
	    });
	    if (onEndI !== -1) {
	      obs.offEnd(this._$endHandlers[onEndI].handler);
	      this._$endHandlers.splice(onEndI, 1);
	    }
	  },

	  _handleSubAny: function _handleSubAny(event) {
	    if (event.type === VALUE) {
	      this._emitValue(event.value);
	    } else if (event.type === ERROR) {
	      this._emitError(event.value);
	    }
	  },

	  _removeQueue: function _removeQueue(obs) {
	    var index = find(this._queue, obs);
	    this._queue = remove(this._queue, index);
	    return index;
	  },

	  _removeCur: function _removeCur(obs) {
	    if (this._active) {
	      this._unsubscribe(obs);
	    }
	    var index = find(this._curSources, obs);
	    this._curSources = remove(this._curSources, index);
	    if (index !== -1) {
	      if (this._queue.length !== 0) {
	        this._pullQueue();
	      } else if (this._curSources.length === 0) {
	        this._onEmpty();
	      }
	    }
	    return index;
	  },

	  _removeOldest: function _removeOldest() {
	    this._removeCur(this._curSources[0]);
	  },

	  _pullQueue: function _pullQueue() {
	    if (this._queue.length !== 0) {
	      this._queue = cloneArray(this._queue);
	      this._addToCur(this._queue.shift());
	    }
	  },

	  _onActivation: function _onActivation() {
	    for (var i = 0, sources = this._curSources; i < sources.length && this._active; i++) {
	      this._subscribe(sources[i]);
	    }
	  },

	  _onDeactivation: function _onDeactivation() {
	    for (var i = 0, sources = this._curSources; i < sources.length; i++) {
	      this._unsubscribe(sources[i]);
	    }
	    if (this._currentlyAdding !== null) {
	      this._unsubscribe(this._currentlyAdding);
	    }
	  },

	  _isEmpty: function _isEmpty() {
	    return this._curSources.length === 0;
	  },

	  _onEmpty: function _onEmpty() {},

	  _clear: function _clear() {
	    Stream.prototype._clear.call(this);
	    this._queue = null;
	    this._curSources = null;
	    this._$handleSubAny = null;
	    this._$endHandlers = null;
	  }

	});

	module.exports = AbstractPool;

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var repeat = __webpack_require__(63);

	module.exports = function concat(observables) {
	  return repeat(function (index) {
	    return observables.length > index ? observables[index] : false;
	  }).setName('concat');
	};

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(2);

	var inherit = _require.inherit;

	var Stream = __webpack_require__(6);

	var _require2 = __webpack_require__(3);

	var END = _require2.END;

	function S(generator) {
	  var _this = this;

	  Stream.call(this);
	  this._generator = generator;
	  this._source = null;
	  this._inLoop = false;
	  this._iteration = 0;
	  this._$handleAny = function (event) {
	    return _this._handleAny(event);
	  };
	}

	inherit(S, Stream, {

	  _name: 'repeat',

	  _handleAny: function _handleAny(event) {
	    if (event.type === END) {
	      this._source = null;
	      this._getSource();
	    } else {
	      this._emit(event.type, event.value);
	    }
	  },

	  _getSource: function _getSource() {
	    if (!this._inLoop) {
	      this._inLoop = true;
	      var generator = this._generator;
	      while (this._source === null && this._alive && this._active) {
	        this._source = generator(this._iteration++);
	        if (this._source) {
	          this._source.onAny(this._$handleAny);
	        } else {
	          this._emitEnd();
	        }
	      }
	      this._inLoop = false;
	    }
	  },

	  _onActivation: function _onActivation() {
	    if (this._source) {
	      this._source.onAny(this._$handleAny);
	    } else {
	      this._getSource();
	    }
	  },

	  _onDeactivation: function _onDeactivation() {
	    if (this._source) {
	      this._source.offAny(this._$handleAny);
	    }
	  },

	  _clear: function _clear() {
	    Stream.prototype._clear.call(this);
	    this._generator = null;
	    this._source = null;
	    this._$handleAny = null;
	  }

	});

	module.exports = function (generator) {
	  return new S(generator);
	};

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(2);

	var inherit = _require.inherit;

	var AbstractPool = __webpack_require__(61);

	function Pool() {
	  AbstractPool.call(this);
	}

	inherit(Pool, AbstractPool, {

	  _name: 'pool',

	  plug: function plug(obs) {
	    this._add(obs);
	    return this;
	  },

	  unplug: function unplug(obs) {
	    this._remove(obs);
	    return this;
	  }

	});

	module.exports = Pool;

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(3);

	var VALUE = _require.VALUE;
	var ERROR = _require.ERROR;
	var END = _require.END;

	var _require2 = __webpack_require__(2);

	var inherit = _require2.inherit;

	var AbstractPool = __webpack_require__(61);

	function FlatMap(source, fn, options) {
	  var _this = this;

	  AbstractPool.call(this, options);
	  this._source = source;
	  this._fn = fn;
	  this._mainEnded = false;
	  this._lastCurrent = null;
	  this._$handleMain = function (event) {
	    return _this._handleMain(event);
	  };
	}

	inherit(FlatMap, AbstractPool, {

	  _onActivation: function _onActivation() {
	    AbstractPool.prototype._onActivation.call(this);
	    if (this._active) {
	      this._source.onAny(this._$handleMain);
	    }
	  },

	  _onDeactivation: function _onDeactivation() {
	    AbstractPool.prototype._onDeactivation.call(this);
	    this._source.offAny(this._$handleMain);
	    this._hadNoEvSinceDeact = true;
	  },

	  _handleMain: function _handleMain(event) {

	    if (event.type === VALUE) {
	      // Is latest value before deactivation survived, and now is 'current' on this activation?
	      // We don't want to handle such values, to prevent to constantly add
	      // same observale on each activation/deactivation when our main source
	      // is a `Kefir.conatant()` for example.
	      var sameCurr = this._activating && this._hadNoEvSinceDeact && this._lastCurrent === event.value;
	      if (!sameCurr) {
	        this._add(event.value, this._fn);
	      }
	      this._lastCurrent = event.value;
	      this._hadNoEvSinceDeact = false;
	    }

	    if (event.type === ERROR) {
	      this._emitError(event.value);
	    }

	    if (event.type === END) {
	      if (this._isEmpty()) {
	        this._emitEnd();
	      } else {
	        this._mainEnded = true;
	      }
	    }
	  },

	  _onEmpty: function _onEmpty() {
	    if (this._mainEnded) {
	      this._emitEnd();
	    }
	  },

	  _clear: function _clear() {
	    AbstractPool.prototype._clear.call(this);
	    this._source = null;
	    this._lastCurrent = null;
	    this._$handleMain = null;
	  }

	});

	module.exports = FlatMap;

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(3);

	var VALUE = _require.VALUE;
	var ERROR = _require.ERROR;
	var END = _require.END;

	var _require2 = __webpack_require__(2);

	var inherit = _require2.inherit;

	var FlatMap = __webpack_require__(65);

	function FlatMapErrors(source, fn) {
	  FlatMap.call(this, source, fn);
	}

	inherit(FlatMapErrors, FlatMap, {

	  // Same as in FlatMap, only VALUE/ERROR flipped
	  _handleMain: function _handleMain(event) {

	    if (event.type === ERROR) {
	      var sameCurr = this._activating && this._hadNoEvSinceDeact && this._lastCurrent === event.value;
	      if (!sameCurr) {
	        this._add(event.value, this._fn);
	      }
	      this._lastCurrent = event.value;
	      this._hadNoEvSinceDeact = false;
	    }

	    if (event.type === VALUE) {
	      this._emitValue(event.value);
	    }

	    if (event.type === END) {
	      if (this._isEmpty()) {
	        this._emitEnd();
	      } else {
	        this._mainEnded = true;
	      }
	    }
	  }

	});

	module.exports = FlatMapErrors;

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(68);

	var createStream = _require.createStream;
	var createProperty = _require.createProperty;

	var _require2 = __webpack_require__(3);

	var NOTHING = _require2.NOTHING;

	var mixin = {

	  _handlePrimaryValue: function _handlePrimaryValue(x) {
	    if (this._lastSecondary !== NOTHING && this._lastSecondary) {
	      this._emitValue(x);
	    }
	  },

	  _handleSecondaryEnd: function _handleSecondaryEnd() {
	    if (this._lastSecondary === NOTHING || !this._lastSecondary) {
	      this._emitEnd();
	    }
	  }

	};

	var S = createStream('filterBy', mixin);
	var P = createProperty('filterBy', mixin);

	module.exports = function filterBy(primary, secondary) {
	  return new (primary._ofSameType(S, P))(primary, secondary);
	};

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Stream = __webpack_require__(6);
	var Property = __webpack_require__(7);

	var _require = __webpack_require__(2);

	var inherit = _require.inherit;

	var _require2 = __webpack_require__(3);

	var VALUE = _require2.VALUE;
	var ERROR = _require2.ERROR;
	var END = _require2.END;
	var NOTHING = _require2.NOTHING;

	function createConstructor(BaseClass, name) {
	  return function AnonymousObservable(primary, secondary, options) {
	    var _this = this;

	    BaseClass.call(this);
	    this._primary = primary;
	    this._secondary = secondary;
	    this._name = primary._name + '.' + name;
	    this._lastSecondary = NOTHING;
	    this._$handleSecondaryAny = function (event) {
	      return _this._handleSecondaryAny(event);
	    };
	    this._$handlePrimaryAny = function (event) {
	      return _this._handlePrimaryAny(event);
	    };
	    this._init(options);
	  };
	}

	function createClassMethods(BaseClass) {
	  return {
	    _init: function _init() {},
	    _free: function _free() {},

	    _handlePrimaryValue: function _handlePrimaryValue(x) {
	      this._emitValue(x);
	    },
	    _handlePrimaryError: function _handlePrimaryError(x) {
	      this._emitError(x);
	    },
	    _handlePrimaryEnd: function _handlePrimaryEnd() {
	      this._emitEnd();
	    },

	    _handleSecondaryValue: function _handleSecondaryValue(x) {
	      this._lastSecondary = x;
	    },
	    _handleSecondaryError: function _handleSecondaryError(x) {
	      this._emitError(x);
	    },
	    _handleSecondaryEnd: function _handleSecondaryEnd() {},

	    _handlePrimaryAny: function _handlePrimaryAny(event) {
	      switch (event.type) {
	        case VALUE:
	          return this._handlePrimaryValue(event.value);
	        case ERROR:
	          return this._handlePrimaryError(event.value);
	        case END:
	          return this._handlePrimaryEnd(event.value);
	      }
	    },
	    _handleSecondaryAny: function _handleSecondaryAny(event) {
	      switch (event.type) {
	        case VALUE:
	          return this._handleSecondaryValue(event.value);
	        case ERROR:
	          return this._handleSecondaryError(event.value);
	        case END:
	          this._handleSecondaryEnd(event.value);
	          this._removeSecondary();
	      }
	    },

	    _removeSecondary: function _removeSecondary() {
	      if (this._secondary !== null) {
	        this._secondary.offAny(this._$handleSecondaryAny);
	        this._$handleSecondaryAny = null;
	        this._secondary = null;
	      }
	    },

	    _onActivation: function _onActivation() {
	      if (this._secondary !== null) {
	        this._secondary.onAny(this._$handleSecondaryAny);
	      }
	      if (this._active) {
	        this._primary.onAny(this._$handlePrimaryAny);
	      }
	    },
	    _onDeactivation: function _onDeactivation() {
	      if (this._secondary !== null) {
	        this._secondary.offAny(this._$handleSecondaryAny);
	      }
	      this._primary.offAny(this._$handlePrimaryAny);
	    },

	    _clear: function _clear() {
	      BaseClass.prototype._clear.call(this);
	      this._primary = null;
	      this._secondary = null;
	      this._lastSecondary = null;
	      this._$handleSecondaryAny = null;
	      this._$handlePrimaryAny = null;
	      this._free();
	    }

	  };
	}

	function createStream(name, mixin) {
	  var S = createConstructor(Stream, name);
	  inherit(S, Stream, createClassMethods(Stream), mixin);
	  return S;
	}

	function createProperty(name, mixin) {
	  var P = createConstructor(Property, name);
	  inherit(P, Property, createClassMethods(Property), mixin);
	  return P;
	}

	module.exports = { createStream: createStream, createProperty: createProperty };

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var combine = __webpack_require__(58);

	var id2 = function id2(_, x) {
	  return x;
	};

	module.exports = function sampledBy(passive, active, combinator) {
	  var _combinator = combinator ? function (a, b) {
	    return combinator(b, a);
	  } : id2;
	  return combine([active], [passive], _combinator).setName(passive, 'sampledBy');
	};

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(68);

	var createStream = _require.createStream;
	var createProperty = _require.createProperty;

	var _require2 = __webpack_require__(3);

	var NOTHING = _require2.NOTHING;

	var mixin = {

	  _handlePrimaryValue: function _handlePrimaryValue(x) {
	    if (this._lastSecondary !== NOTHING) {
	      this._emitValue(x);
	    }
	  },

	  _handleSecondaryEnd: function _handleSecondaryEnd() {
	    if (this._lastSecondary === NOTHING) {
	      this._emitEnd();
	    }
	  }

	};

	var S = createStream('skipUntilBy', mixin);
	var P = createProperty('skipUntilBy', mixin);

	module.exports = function skipUntilBy(primary, secondary) {
	  return new (primary._ofSameType(S, P))(primary, secondary);
	};

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(68);

	var createStream = _require.createStream;
	var createProperty = _require.createProperty;

	var mixin = {

	  _handleSecondaryValue: function _handleSecondaryValue() {
	    this._emitEnd();
	  }

	};

	var S = createStream('takeUntilBy', mixin);
	var P = createProperty('takeUntilBy', mixin);

	module.exports = function takeUntilBy(primary, secondary) {
	  return new (primary._ofSameType(S, P))(primary, secondary);
	};

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(68);

	var createStream = _require.createStream;
	var createProperty = _require.createProperty;

	var mixin = {

	  _init: function _init() {
	    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    var _ref$flushOnEnd = _ref.flushOnEnd;
	    var flushOnEnd = _ref$flushOnEnd === undefined ? true : _ref$flushOnEnd;

	    this._buff = [];
	    this._flushOnEnd = flushOnEnd;
	  },

	  _free: function _free() {
	    this._buff = null;
	  },

	  _flush: function _flush() {
	    if (this._buff !== null) {
	      this._emitValue(this._buff);
	      this._buff = [];
	    }
	  },

	  _handlePrimaryEnd: function _handlePrimaryEnd() {
	    if (this._flushOnEnd) {
	      this._flush();
	    }
	    this._emitEnd();
	  },

	  _onActivation: function _onActivation() {
	    this._primary.onAny(this._$handlePrimaryAny);
	    if (this._alive && this._secondary !== null) {
	      this._secondary.onAny(this._$handleSecondaryAny);
	    }
	  },

	  _handlePrimaryValue: function _handlePrimaryValue(x) {
	    this._buff.push(x);
	  },

	  _handleSecondaryValue: function _handleSecondaryValue() {
	    this._flush();
	  },

	  _handleSecondaryEnd: function _handleSecondaryEnd() {
	    if (!this._flushOnEnd) {
	      this._emitEnd();
	    }
	  }

	};

	var S = createStream('bufferBy', mixin);
	var P = createProperty('bufferBy', mixin);

	module.exports = function bufferBy(primary, secondary, options /* optional */) {
	  return new (primary._ofSameType(S, P))(primary, secondary, options);
	};

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(68);

	var createStream = _require.createStream;
	var createProperty = _require.createProperty;

	var _require2 = __webpack_require__(3);

	var NOTHING = _require2.NOTHING;

	var mixin = {

	  _init: function _init() {
	    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    var _ref$flushOnEnd = _ref.flushOnEnd;
	    var flushOnEnd = _ref$flushOnEnd === undefined ? true : _ref$flushOnEnd;
	    var _ref$flushOnChange = _ref.flushOnChange;
	    var flushOnChange = _ref$flushOnChange === undefined ? false : _ref$flushOnChange;

	    this._buff = [];
	    this._flushOnEnd = flushOnEnd;
	    this._flushOnChange = flushOnChange;
	  },

	  _free: function _free() {
	    this._buff = null;
	  },

	  _flush: function _flush() {
	    if (this._buff !== null) {
	      this._emitValue(this._buff);
	      this._buff = [];
	    }
	  },

	  _handlePrimaryEnd: function _handlePrimaryEnd() {
	    if (this._flushOnEnd) {
	      this._flush();
	    }
	    this._emitEnd();
	  },

	  _handlePrimaryValue: function _handlePrimaryValue(x) {
	    this._buff.push(x);
	    if (this._lastSecondary !== NOTHING && !this._lastSecondary) {
	      this._flush();
	    }
	  },

	  _handleSecondaryEnd: function _handleSecondaryEnd() {
	    if (!this._flushOnEnd && (this._lastSecondary === NOTHING || this._lastSecondary)) {
	      this._emitEnd();
	    }
	  },

	  _handleSecondaryValue: function _handleSecondaryValue(x) {
	    if (this._flushOnChange && !x) {
	      this._flush();
	    }

	    // from default _handleSecondaryValue
	    this._lastSecondary = x;
	  }

	};

	var S = createStream('bufferWhileBy', mixin);
	var P = createProperty('bufferWhileBy', mixin);

	module.exports = function bufferWhileBy(primary, secondary, options /* optional */) {
	  return new (primary._ofSameType(S, P))(primary, secondary, options);
	};

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var merge = __webpack_require__(60);
	var map = __webpack_require__(32);
	var skipDuplicates = __webpack_require__(40);
	var toProperty = __webpack_require__(24);

	var f = function f() {
	  return false;
	};
	var t = function t() {
	  return true;
	};

	module.exports = function awaiting(a, b) {
	  var result = merge([map(a, t), map(b, f)]);
	  result = skipDuplicates(result);
	  result = toProperty(result, f);
	  return result.setName(a, 'awaiting');
	};

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(25);

	var createStream = _require.createStream;
	var createProperty = _require.createProperty;

	var mixin = {

	  _init: function _init(_ref) {
	    var fn = _ref.fn;

	    this._fn = fn;
	  },

	  _free: function _free() {
	    this._fn = null;
	  },

	  _handleValue: function _handleValue(x) {
	    var fn = this._fn;
	    var result = fn(x);
	    if (result.convert) {
	      this._emitError(result.error);
	    } else {
	      this._emitValue(x);
	    }
	  }

	};

	var S = createStream('valuesToErrors', mixin);
	var P = createProperty('valuesToErrors', mixin);

	var defFn = function defFn(x) {
	  return { convert: true, error: x };
	};

	module.exports = function valuesToErrors(obs) {
	  var fn = arguments.length <= 1 || arguments[1] === undefined ? defFn : arguments[1];

	  return new (obs._ofSameType(S, P))(obs, { fn: fn });
	};

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(25);

	var createStream = _require.createStream;
	var createProperty = _require.createProperty;

	var mixin = {

	  _init: function _init(_ref) {
	    var fn = _ref.fn;

	    this._fn = fn;
	  },

	  _free: function _free() {
	    this._fn = null;
	  },

	  _handleError: function _handleError(x) {
	    var fn = this._fn;
	    var result = fn(x);
	    if (result.convert) {
	      this._emitValue(result.value);
	    } else {
	      this._emitError(x);
	    }
	  }

	};

	var S = createStream('errorsToValues', mixin);
	var P = createProperty('errorsToValues', mixin);

	var defFn = function defFn(x) {
	  return { convert: true, value: x };
	};

	module.exports = function errorsToValues(obs) {
	  var fn = arguments.length <= 1 || arguments[1] === undefined ? defFn : arguments[1];

	  return new (obs._ofSameType(S, P))(obs, { fn: fn });
	};

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(25);

	var createStream = _require.createStream;
	var createProperty = _require.createProperty;

	var mixin = {

	  _handleError: function _handleError(x) {
	    this._emitError(x);
	    this._emitEnd();
	  }

	};

	var S = createStream('endOnError', mixin);
	var P = createProperty('endOnError', mixin);

	module.exports = function endOnError(obs) {
	  return new (obs._ofSameType(S, P))(obs);
	};

/***/ }
/******/ ])
});
;
},{}],9:[function(require,module,exports){
/* eslint-disable no-unused-vars */
'use strict';
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

module.exports = Object.assign || function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (Object.getOwnPropertySymbols) {
			symbols = Object.getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],10:[function(require,module,exports){
"use strict";

var SVGNS = "http://www.w3.org/2000/svg";
var modulesNS = ['key', 'on', 'style', 'class', 'props'];
var slice = Array.prototype.slice;

function isPrimitive(val) {
  return  typeof val === 'string'   ||
          typeof val === 'number'   ||
          typeof val === 'boolean'  ||
          typeof val === 'symbol'   ||
          val === null              ||
          val === undefined;
}

function normalizeAttrs(attrs, nsURI, defNS, modules) {
  var map = { ns: nsURI };
  for (var i = 0, len = modules.length; i < len; i++) {
    var mod = modules[i];
    if(attrs[mod])
      map[mod] = attrs[mod];
  }
  for(var key in attrs) {
    const parts = key.split('-');
    if(parts.length > 1)
      addAttr(parts[0], parts[1], attrs[key]);
    else if(!map[key])
      addAttr(defNS, parts[0], attrs[key]);
  }
  return map;
  
  function addAttr(namespace, key, val) {
    const ns = map[namespace] || (map[namespace] = {});
    ns[key] = val;
  }
}

function jsx(nsURI, defNS, modules, tag, attrs, children) {
  attrs = attrs || {};
  if(attrs.classNames) {
    var cns = attrs.classNames;
    tag = tag + '.' + (
      Array.isArray(cns) ? cns.join('.') : cns.replace(/\s+/g, '.')  
    );
  }
  if(typeof tag === 'string') {
    return { 
      sel       : tag, 
      data      : normalizeAttrs(attrs, nsURI, defNS, modules), 
      children  : children.map( function(c) { 
        return isPrimitive(c) ? {text: c} : c;
      })
    };
  } else if(typeof tag === 'function')
    return tag(attrs, children);
  else if(tag && typeof tag.view === 'function')
    return tag.view(attrs, children);
}

function JSX(nsURI, defNS, modules) {
  return function jsxWithCustomNS(tag, attrs, children) {
    if(arguments.length > 3 || !Array.isArray(children))
      children = slice.call(arguments, 2);
    return jsx(nsURI, defNS || 'props', modules || modulesNS, tag, attrs, children);
  } 
}

module.exports = { 
  html: JSX(undefined), 
  svg: JSX(SVGNS, 'attrs'), 
  JSX: JSX 
};
},{}],11:[function(require,module,exports){
var VNode = require('./vnode');
var is = require('./is');

module.exports = function h(sel, b, c) {
  var data = {}, children, text, i;
  if (arguments.length === 3) {
    data = b;
    if (is.array(c)) { children = c; }
    else if (is.primitive(c)) { text = c; }
  } else if (arguments.length === 2) {
    if (is.array(b)) { children = b; }
    else if (is.primitive(b)) { text = b; }
    else { data = b; }
  }
  if (is.array(children)) {
    for (i = 0; i < children.length; ++i) {
      if (is.primitive(children[i])) children[i] = VNode(undefined, undefined, undefined, children[i]);
    }
  }
  return VNode(sel, data, children, text, undefined);
};

},{"./is":12,"./vnode":18}],12:[function(require,module,exports){
module.exports = {
  array: Array.isArray,
  primitive: function(s) { return typeof s === 'string' || typeof s === 'number'; },
};

},{}],13:[function(require,module,exports){
function updateClass(oldVnode, vnode) {
  var cur, name, elm = vnode.elm,
      oldClass = oldVnode.data.class || {},
      klass = vnode.data.class || {};
  for (name in klass) {
    cur = klass[name];
    if (cur !== oldClass[name]) {
      elm.classList[cur ? 'add' : 'remove'](name);
    }
  }
}

module.exports = {create: updateClass, update: updateClass};

},{}],14:[function(require,module,exports){
var is = require('../is');

function arrInvoker(arr) {
  return function() {
    // Special case when length is two, for performance
    arr.length === 2 ? arr[0](arr[1]) : arr[0].apply(undefined, arr.slice(1));
  };
}

function fnInvoker(o) {
  return function(ev) { o.fn(ev); };
}

function updateEventListeners(oldVnode, vnode) {
  var name, cur, old, elm = vnode.elm,
      oldOn = oldVnode.data.on || {}, on = vnode.data.on;
  if (!on) return;
  for (name in on) {
    cur = on[name];
    old = oldOn[name];
    if (old === undefined) {
      if (is.array(cur)) {
        elm.addEventListener(name, arrInvoker(cur));
      } else {
        cur = {fn: cur};
        on[name] = cur;
        elm.addEventListener(name, fnInvoker(cur));
      }
    } else if (is.array(old)) {
      // Deliberately modify old array since it's captured in closure created with `arrInvoker`
      old.length = cur.length;
      for (var i = 0; i < old.length; ++i) old[i] = cur[i];
      on[name]  = old;
    } else {
      old.fn = cur;
      on[name] = old;
    }
  }
}

module.exports = {create: updateEventListeners, update: updateEventListeners};

},{"../is":12}],15:[function(require,module,exports){
function updateProps(oldVnode, vnode) {
  var key, cur, old, elm = vnode.elm,
      oldProps = oldVnode.data.props || {}, props = vnode.data.props || {};
  for (key in props) {
    cur = props[key];
    old = oldProps[key];
    if (old !== cur) {
      elm[key] = cur;
    }
  }
}

module.exports = {create: updateProps, update: updateProps};

},{}],16:[function(require,module,exports){
var raf = requestAnimationFrame || setTimeout;
var nextFrame = function(fn) { raf(function() { raf(fn); }); };

function setNextFrame(obj, prop, val) {
  nextFrame(function() { obj[prop] = val; });
}

function updateStyle(oldVnode, vnode) {
  var cur, name, elm = vnode.elm,
      oldStyle = oldVnode.data.style || {},
      style = vnode.data.style || {},
      oldHasDel = 'delayed' in oldStyle;
  for (name in style) {
    cur = style[name];
    if (name === 'delayed') {
      for (name in style.delayed) {
        cur = style.delayed[name];
        if (!oldHasDel || cur !== oldStyle.delayed[name]) {
          setNextFrame(elm.style, name, cur);
        }
      }
    } else if (name !== 'remove' && cur !== oldStyle[name]) {
      elm.style[name] = cur;
    }
  }
}

function applyDestroyStyle(vnode) {
  var style, name, elm = vnode.elm, s = vnode.data.style;
  if (!s || !(style = s.destroy)) return;
  for (name in style) {
    elm.style[name] = style[name];
  }
}

function applyRemoveStyle(vnode, rm) {
  var s = vnode.data.style;
  if (!s || !s.remove) {
    rm();
    return;
  }
  var name, elm = vnode.elm, idx, i = 0, maxDur = 0,
      compStyle, style = s.remove, amount = 0, applied = [];
  for (name in style) {
    applied.push(name);
    elm.style[name] = style[name];
  }
  compStyle = getComputedStyle(elm);
  var props = compStyle['transition-property'].split(', ');
  for (; i < props.length; ++i) {
    if(applied.indexOf(props[i]) !== -1) amount++;
  }
  elm.addEventListener('transitionend', function(ev) {
    if (ev.target === elm) --amount;
    if (amount === 0) rm();
  });
}

module.exports = {create: updateStyle, update: updateStyle, destroy: applyDestroyStyle, remove: applyRemoveStyle};

},{}],17:[function(require,module,exports){
// jshint newcap: false
/* global require, module, document, Element */
'use strict';

var VNode = require('./vnode');
var is = require('./is');

function isUndef(s) { return s === undefined; }
function isDef(s) { return s !== undefined; }

function emptyNodeAt(elm) {
  return VNode(elm.tagName, {}, [], undefined, elm);
}

var emptyNode = VNode('', {}, [], undefined, undefined);

function sameVnode(vnode1, vnode2) {
  return vnode1.key === vnode2.key && vnode1.sel === vnode2.sel;
}

function createKeyToOldIdx(children, beginIdx, endIdx) {
  var i, map = {}, key;
  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;
    if (isDef(key)) map[key] = i;
  }
  return map;
}

function createRmCb(childElm, listeners) {
  return function() {
    if (--listeners === 0) childElm.parentElement.removeChild(childElm);
  };
}

var hooks = ['create', 'update', 'remove', 'destroy', 'pre', 'post'];

function init(modules) {
  var i, j, cbs = {};
  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];
    for (j = 0; j < modules.length; ++j) {
      if (modules[j][hooks[i]] !== undefined) cbs[hooks[i]].push(modules[j][hooks[i]]);
    }
  }

  function createElm(vnode, insertedVnodeQueue) {
    var i, data = vnode.data;
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) i(vnode);
      if (isDef(i = data.vnode)) vnode = i;
    }
    var elm, children = vnode.children, sel = vnode.sel;
    if (isDef(sel)) {
      // Parse selector
      var hashIdx = sel.indexOf('#');
      var dotIdx = sel.indexOf('.', hashIdx);
      var hash = hashIdx > 0 ? hashIdx : sel.length;
      var dot = dotIdx > 0 ? dotIdx : sel.length;
      var tag = hashIdx !== -1 || dotIdx !== -1 ? sel.slice(0, Math.min(hash, dot)) : sel;
      elm = vnode.elm = isDef(data) && isDef(i = data.ns) ? document.createElementNS(i, tag)
                                                          : document.createElement(tag);
      if (hash < dot) elm.id = sel.slice(hash + 1, dot);
      if (dotIdx > 0) elm.className = sel.slice(dot+1).replace(/\./g, ' ');
      if (is.array(children)) {
        for (i = 0; i < children.length; ++i) {
          elm.appendChild(createElm(children[i], insertedVnodeQueue));
        }
      } else if (is.primitive(vnode.text)) {
        elm.appendChild(document.createTextNode(vnode.text));
      }
      for (i = 0; i < cbs.create.length; ++i) cbs.create[i](emptyNode, vnode);
      i = vnode.data.hook; // Reuse variable
      if (isDef(i)) {
        if (i.create) i.create(emptyNode, vnode);
        if (i.insert) insertedVnodeQueue.push(vnode);
      }
    } else {
      elm = vnode.elm = document.createTextNode(vnode.text);
    }
    return vnode.elm;
  }

  function addVnodes(parentElm, before, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      parentElm.insertBefore(createElm(vnodes[startIdx], insertedVnodeQueue), before);
    }
  }

  function invokeDestroyHook(vnode) {
    var i = vnode.data, j;
    if (isDef(i)) {
      if (isDef(i = i.hook) && isDef(i = i.destroy)) i(vnode);
      for (i = 0; i < cbs.destroy.length; ++i) cbs.destroy[i](vnode);
      if (isDef(i = vnode.children)) {
        for (j = 0; j < vnode.children.length; ++j) {
          invokeDestroyHook(vnode.children[j]);
        }
      }
    }
  }

  function removeVnodes(parentElm, vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var i, listeners, rm, ch = vnodes[startIdx];
      if (isDef(ch)) {
        if (isDef(ch.sel)) {
          invokeDestroyHook(ch);
          listeners = cbs.remove.length + 1;
          rm = createRmCb(ch.elm, listeners);
          for (i = 0; i < cbs.remove.length; ++i) cbs.remove[i](ch, rm);
          if (isDef(i = ch.data) && isDef(i = i.hook) && isDef(i = i.remove)) {
            i(ch, rm);
          } else {
            rm();
          }
        } else { // Text node
          parentElm.removeChild(ch.elm);
        }
      }
    }
  }

  function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue) {
    var oldStartIdx = 0, newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, elmToMove, before;

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);
        parentElm.insertBefore(oldStartVnode.elm, oldEndVnode.elm.nextSibling);
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);
        parentElm.insertBefore(oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
        idxInOld = oldKeyToIdx[newStartVnode.key];
        if (isUndef(idxInOld)) { // New element
          parentElm.insertBefore(createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm);
          newStartVnode = newCh[++newStartIdx];
        } else {
          elmToMove = oldCh[idxInOld];
          patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);
          oldCh[idxInOld] = undefined;
          parentElm.insertBefore(elmToMove.elm, oldStartVnode.elm);
          newStartVnode = newCh[++newStartIdx];
        }
      }
    }
    if (oldStartIdx > oldEndIdx) {
      before = isUndef(newCh[newEndIdx+1]) ? null : newCh[newEndIdx+1].elm;
      addVnodes(parentElm, before, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function patchVnode(oldVnode, vnode, insertedVnodeQueue) {
    var i, hook;
    if (isDef(i = vnode.data) && isDef(hook = i.hook) && isDef(i = hook.prepatch)) {
      i(oldVnode, vnode);
    }
    if (isDef(i = oldVnode.data) && isDef(i = i.vnode)) oldVnode = i;
    if (isDef(i = vnode.data) && isDef(i = i.vnode)) vnode = i;
    var elm = vnode.elm = oldVnode.elm, oldCh = oldVnode.children, ch = vnode.children;
    if (oldVnode === vnode) return;
    if (isDef(vnode.data)) {
      for (i = 0; i < cbs.update.length; ++i) cbs.update[i](oldVnode, vnode);
      i = vnode.data.hook;
      if (isDef(i) && isDef(i = i.update)) i(oldVnode, vnode);
    }
    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) updateChildren(elm, oldCh, ch, insertedVnodeQueue);
      } else if (isDef(ch)) {
        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(elm, oldCh, 0, oldCh.length - 1);
      }
    } else if (oldVnode.text !== vnode.text) {
      elm.textContent = vnode.text;
    }
    if (isDef(hook) && isDef(i = hook.postpatch)) {
      i(oldVnode, vnode);
    }
  }

  return function(oldVnode, vnode) {
    var i;
    var insertedVnodeQueue = [];
    for (i = 0; i < cbs.pre.length; ++i) cbs.pre[i]();
    if (oldVnode instanceof Element) {
      if (oldVnode.parentElement !== null) {
        createElm(vnode, insertedVnodeQueue);
        oldVnode.parentElement.replaceChild(vnode.elm, oldVnode);
      } else {
        oldVnode = emptyNodeAt(oldVnode);
        patchVnode(oldVnode, vnode, insertedVnodeQueue);
      }
    } else {
      patchVnode(oldVnode, vnode, insertedVnodeQueue);
    }
    for (i = 0; i < insertedVnodeQueue.length; ++i) {
      insertedVnodeQueue[i].data.hook.insert(insertedVnodeQueue[i]);
    }
    for (i = 0; i < cbs.post.length; ++i) cbs.post[i]();
    return vnode;
  };
}

module.exports = {init: init};

},{"./is":12,"./vnode":18}],18:[function(require,module,exports){
module.exports = function(sel, data, children, text, elm) {
  var key = data === undefined ? undefined : data.key;
  return {sel: sel, data: data, children: children,
          text: text, elm: elm, key: key};
};

},{}]},{},[4])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
